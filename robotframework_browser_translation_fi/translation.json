{
    "cancel_download": {
        "name": "peruuta_lataus",
        "doc": "Peruuttaa aktiivisen latauksen.\n\n        | =Argumentit= | =Kuvaus= |\n        | lataus    | `DownloadInfo` -objekti tai latauksen tunniste, joka peruutetaan. |\n\n        [https://forum.robotframework.org/t//6478|Kommentti >>]\n        "
    },
    "close_browser": {
        "name": "sulje_selain",
        "doc": "Sulkee nykyisen selaimen.\n\n        Aktiivinen selain asetetaan selaimeksi, joka oli aktiivinen ennen tätä. Sulkee kaikki tämän\n        selaimen kontekstit ja sivut. Katso `Selain, Konteksti ja Sivu` lisätietoja selaimesta ja\n        siihen liittyvistä käsitteistä.\n\n\n        | =Argumentti=  | =Kuvaus= |\n        | ``selain`` | Suljettava selain. ``NYKYINEN`` valitsee aktiivisen selaimen. ``KAIKKI`` sulkee kaikki selaimet. Kun annetaan selaimen tunniste, kyseinen selain sulkeutuu. |\n\n\n\n        Esimerkki:\n        | `Sulje Selain`    KAIKKI        # Sulkee kaikki selaimet\n        | `Sulje Selain`    NYKYINEN    # Sulje nykyinen selain\n        | `Sulje Selain`               # Sulje nykyinen selain\n        | `Sulje Selain`    ${id}      # Sulje tunnistetta vastaava selain\n\n        [https://forum.robotframework.org/t//4239|Kommentti >>]\n        "
    },
    "close_browser_server": {
        "name": "sulje_selain_palvelin",
        "doc": "Sulje Playwright-selaimen palvelin, joka on tunnistettu sen verkkosokettipäätepisteen (wsEndpoint) perusteella.\n\n        wsEndpoint-merkkijono palautetaan `Launch Browser Server`-toiminnolla ja sitä käytetään myös `Connect To Browser`-toiminnossa.\n\n        | =Argumentit=     | =Kuvaus= |\n        | ``wsEndpoint`` | Selaimen palvelimen osoite. Esimerkki: ``ws://127.0.0.1:63784/ca69bf0e9471391e8183d9ac1e90e1ba``|\n        "
    },
    "close_context": {
        "name": "sulje_konteksti",
        "doc": "Sulkee kontekstin.\n\n        Aktiivinen konteksti asetetaan kontekstiksi, joka oli aktiivinen ennen tätä. Sulkee tähän kontekstiin kuuluvat sivut.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja kontekstista ja siihen liittyvistä käsitteistä.\n\n        | =Argumentti=  | =Kuvaus= |\n        | ``konteksti`` | Suljettava konteksti. ``NYKYINEN`` valitsee aktiivisen kontekstin. ``KAIKKI`` sulkee kaikki kontekstit. Kun annetaan kontekstin tunniste, kyseinen konteksti sulkeutuu. |\n        | ``selain``    | Selain, jossa konteksti suljetaan. ``NYKYINEN`` valitsee aktiivisen selaimen. ``KAIKKI`` sulkee kaikki selaimet. Kun annetaan selaimen tunniste, kyseinen selain sulkeutuu. |\n\n        Esimerkki:\n        | `Sulje Konteksti`                          # Sulkee nykyisen kontekstin ja nykyisen selaimen\n        | `Sulje Konteksti`    NYKYINEN    NYKYINEN    # Sulkee nykyisen kontekstin ja nykyisen selaimen\n        | `Sulje Konteksti`    KAIKKI        NYKYINEN    # Sulkee kaikki nykyisen selaimen kontekstit ja nykyisen selaimen\n        | `Sulje Konteksti`    KAIKKI        KAIKKI        # Sulkee kaikki nykyisen selaimen kontekstit ja kaikki selaimet\n\n        [https://forum.robotframework.org/t//4240|Kommentti >>]\n        "
    },
    "close_page": {
        "name": "sulje_sivu",
        "doc": "Sulkee ``sivun`` ``kontekstissa`` ``selaimessa``.\n\n        Oletusarvoisesti nykyiselle kaikille kolmelle. Aktiivinen sivu asetetaan sivuksi, joka oli aktiivinen ennen tätä.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja sivusta ja siihen liittyvistä käsitteistä.\n\n        ``runBeforeUnload`` määrittelee, missä suoritetaan\n        [https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event|ennen purkautumista]\n        sivunkäsittelijät. Oletusarvoisesti epätosi.\n\n\n        | =Argumentti=  | =Kuvaus= |\n        | ``sivu``    | Suljettava sivu. ``NYKYINEN`` valitsee aktiivisen sivun. ``KAIKKI`` sulkee kaikki sivut. Kun annetaan sivun tunniste, kyseinen sivu sulkeutuu. |\n        | ``konteksti`` | Konteksti, jossa sivu suljetaan. ``NYKYINEN`` valitsee aktiivisen kontekstin. ``KAIKKI`` sulkee kaikki kontekstit. Kun annetaan kontekstin tunniste, kyseinen konteksti sulkeutuu. |\n        | ``selain`` | Selain, jossa sivu suljetaan. ``NYKYINEN`` valitsee aktiivisen selaimen. ``KAIKKI`` sulkee kaikki selaimet. Kun annetaan selaimen tunniste, kyseinen selain sulkeutuu. |\n\n        Palauttaa listan sanakirjoista, jotka sisältävät tunnisteen, virheet ja konsoliviestit sivulta.\n\n        Esimerkki\n        | `Sulje Sivu`                                       # Sulkee nykyisen sivun, nykyisen kontekstin ja selaimen sisällä\n        | `Sulje Sivu`    NYKYINEN     NYKYINEN     NYKYINEN    # Sulkee nykyisen sivun, nykyisen kontekstin ja selaimen sisällä\n        | `Sulje Sivu`    KAIKKI         KAIKKI         KAIKKI        # Sulkee kaikki sivut, kaikissa konteksteissa ja selaimissa\n\n        [https://forum.robotframework.org/t//4241|Kommentti >>]\n        "
    },
    "connect_to_browser": {
        "name": "yhdistä_selaimelle",
        "doc": "Yhdistä Playwright-selaimen palvelimeen playwrightin verkkosoketin tai Chrome DevTools -protokollan kautta.\n\n        Katso `Launch Browser Server` lisätietoja siitä, miten käynnistetään Playwright-selaimen palvelin.\n\n        Katso `Selain, Konteksti ja Sivu` lisätietoja selaimesta ja siihen liittyvistä käsitteistä.\n\n        Palauttaa vakaan tunnisteen yhdistetylle selaimelle.\n\n        | =Argumentti=     | =Kuvaus= |\n        | ``wsEndpoint`` | Osoite, johon yhdistetään. Joko ``ws://`` tai ``http://`` jos käytetään cdp:tä. |\n        | ``selain``    | Avaa määritetyn selaimen. Oletusarvoisesti ``chromium``. |\n        | ``käytä_cdp``    | Yhdistä selaimelle Chrome DevTools -protokollan kautta. Oletusarvoisesti epätosi. Toimii vain kromiin perustuvien selainten kanssa. |\n\n        Selaimelle yhdistämiseksi Chrome DevTools -protokollan kautta selaimen on käynnistyttävä tämä protokolla käytössä.\n        Tämä tapahtuu yleensä käynnistämällä Chrome-selain argumentilla ``--remote-debugging-port=9222`` tai vastaavalla.\n        Kun selain toimii aktiivisena CDP:llä, on mahdollista yhdistää siihen joko verkkosoketin (``ws://``)\n        tai HTTP:n (``http://``) kautta. HTTP-yhteys voidaan ottaa käyttöön, kun ``käytä_cdp`` on asetettu todeksi.\n        Tyypillinen osoite CDP-yhteydelle on ``http://127.0.0.1:9222``.\n\n        [https://forum.robotframework.org/t//4242|Kommentti >>]\n        "
    },
    "get_browser_catalog": {
        "name": "hanki_selainkatalogi",
        "doc": "Palauttaa kaikki selaimet, niiden avoimet kontekstit ja näissä konteksteissa avoimet sivut.\n\n        Katso `Selain, Konteksti ja Sivu` lisätietoja näistä käsitteistä.\n\n        | =Argumentit= | =Kuvaus= |\n        | assertion_operator | Valinnainen tarkistusoperaattori. Katso lisätietoja `Väitteet`-osiosta. |\n        | assertion_expected | Valinnainen odotettu arvo. Katso lisätietoja `Väitteet`-osiosta. |\n        | viesti            | Valinnainen mukautettu viesti epäonnistumistilanteessa. Katso lisätietoja `Väitteet`-osiosta. |\n\n        Data jäsentyy Pythonin listaksi, joka sisältää avoimia objekteja edustavia tietoja.\n\n        Juuritasolla data sisältää listan avoimista selaimista.\n\n        Dataa voidaan manipuloida myös ``assertion_operator`` avulla esimerkiksi löytääkseen\n        tietyn tunnisteen indeksin tai sivun otsikon avulla ``then``-operaattorilla.\n\n        Paluuarvoa voidaan myös verrata odotettuun arvoon.\n\n        Esimerkki:\n        | [\n        |   {\n        |     \"tyyppi\": \"chromium\",\n        |     \"id\": \"browser=96207191-8147-44e7-b9ac-5e04f2709c1d\",\n        |     \"kontekstit\": [\n        |       {\n        |         \"tyyppi\": \"konteksti\",\n        |         \"id\": \"context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089\",\n        |         \"aktiivinenSivu\": \"page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12\",\n        |         \"sivut\": [\n        |           {\n        |             \"tyyppi\": \"sivu\",\n        |             \"otsikko\": \"Robocorp\",\n        |             \"url\": \"https://robocorp.com/\",\n        |             \"id\": \"page=7ac15782-22d2-48b4-8591-ff17663fa737\",\n        |             \"aikaleima\": 1598607713.858\n        |           },\n        |           {\n        |             \"tyyppi\": \"sivu\",\n        |             \"otsikko\": \"Home - Reaktor\",\n        |             \"url\": \"https://www.reaktor.com/\",\n        |             \"id\": \"page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12\",\n        |             \"aikaleima\": 1598607714.702\n        |           }\n        |         ]\n        |       }\n        |     ],\n        |     \"aktiivinenKonteksti\": \"context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089\",\n        |     \"aktiivinenSelain\": false\n        |   },\n        |   {\n        |     \"tyyppi\": \"firefox\",\n        |     \"id\": \"browser=ad99abac-17a9-472b-ac7f-d6352630834e\",\n        |     \"kontekstit\": [\n        |       {\n        |         \"tyyppi\": \"konteksti\",\n        |         \"id\": \"context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0\",\n        |         \"aktiivinenSivu\": \"page=8baf2991-5eaf-444d-a318-8045f914e96a\",\n        |         \"sivut\": [\n        |           {\n        |             \"tyyppi\": \"sivu\",\n        |             \"otsikko\": \"Software-Qualitätssicherung und Softwaretest\",\n        |             \"url\": \"https://www.imbus.de/\",\n        |             \"id\": \"page=8baf2991-5eaf-444d-a318-8045f914e96a\",\n        |             \"aikaleima\": 1598607716.828\n        |           }\n        |         ]\n        |       }\n        |     ],\n        |     \"aktiivinenKonteksti\": \"context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0\",\n        |     \"aktiivinenSelain\": true\n        |   }\n        | ]\n\n        [https://forum.robotframework.org/t//4259|Kommentti >>]\n        "
    },
    "get_browser_ids": {
        "name": "hanki_selaimen_tunnisteet",
        "doc": "Palauttaa avoimien selainten tunnisteiden listan.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja selaimesta ja siihen liittyvistä käsitteistä.\n\n\n        ``selain`` Oletusarvo on ``KAIKKI``\n        - ``KAIKKI`` / ``MIKÄ TAHANSA`` Palauttaa kaikki tunnisteet listana.\n        - ``AKTIIVINEN`` / ``NYKYINEN`` Palauttaa tällä hetkellä aktiivisen selaimen tunnisteen listana.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``selain`` | Selain, josta tunnisteet halutaan hakea. ``KAIKKI`` kaikista avoimista selaimista, ``AKTIIVINEN`` tällä hetkellä aktiivisesta selaimesta tai selaimen tunniste, josta tunnisteet halutaan hakea. |\n\n        AKTIIVINEN selain on synonyymi NYKYISELLE selaimelle.\n\n        [https://forum.robotframework.org/t//4260|Kommentti >>]\n        "
    },
    "get_console_log": {
        "name": "hanki_konsoliloki",
        "doc": "Palauttaa aktiivisen sivun konsolilokin.\n\n        Jos väitteitä käytetään ja ne epäonnistuvat, tämä avainsana epäonnistuu välittömästi ilman uudelleenyritystä.\n\n        | =Argumentit= | =Kuvaus= |\n        | assertion_operator | Valinnainen väitteiden operaattori. Katso lisätietoja `Väitteet`-osiosta. |\n        | assertion_expected | Valinnainen odotettu arvo. Katso lisätietoja `Väitteet`-osiosta. |\n        | viesti            | Valinnainen mukautettu viesti epäonnistumistilanteessa. Katso lisätietoja `Väitteet`-osiosta. |\n        | full               | Jos tosi, palauttaa koko konsolilokin. Jos epätosi, palauttaa vain uudet merkinnät, jotka on lisätty viime kerrasta lähtien. |\n        | last               | Jos asetettu, palauttaa vain viimeiset n merkintää. Voi olla `int`-muotoinen merkkijono merkintöjen lukumääräksi tai `timedelta`-muotoinen aikaväliksi. |\n\n        Palautettu data on konsoliviestien `list`.\n\n        Konsoliviesti on `dict` seuraavalla rakenteella:\n        | {\n        |   \"type\": str,\n        |   \"text\": str,\n        |   \"location\": {\n        |     \"url\": str,\n        |     \"lineNumber\": int,\n        |     \"columnNumber\": int\n        |   },\n        |   \"time\": str\n        | }\n\n        Esimerkki:\n        | [{\n        |   'type': 'log',\n        |   'text': 'Stuff loaded...',\n        |   'location': {\n        |     'url': 'https://example.com/js/chunk-769742de.6a462276.js',\n        |     'lineNumber': 60,\n        |     'columnNumber': 63771\n        |   },\n        |   'time': '2023-02-05T17:42:52.064Z'\n        | }]\n\n        Avaimet:\n        | =Avain= | =Kuvaus= |\n        | ``type`` | Yksi seuraavista arvoista: ``log``, ``debug``, ``info``, ``error``, ``warning``, ``dir``, ``dirxml``, ``table``, ``trace``, ``clear``, ``startGroup``, ``startGroupCollapsed``, ``endGroup``, ``assert``, ``profile``, ``profileEnd``, ``count``, ``timeEnd`` |\n        | ``text`` | Konsoliviestin teksti. |\n        | ``location.url`` | Tämän viestin luoneen resurssin URL. |\n        | ``location.lineNumber`` | Tämän viestin luoneen resurssin rivinumero (nollapohjainen). |\n        | ``location.columnNumber`` | Tämän viestin luoneen resurssin sarakenumero (nollapohjainen). |\n        | ``time`` | Lokiviestin aikaleima ISO 8601 -merkkijonona. |\n\n        [https://forum.robotframework.org/t//5267|Kommentti >>]\n        "
    },
    "get_context_ids": {
        "name": "hanki_kontekstitunnukset",
        "doc": "Palauttaa luettelon kontekstin tunnisteista selaimen valinnan perusteella.\nKatso Selain, Konteksti ja Sivu lisätietoja Kontekstista ja siihen liittyvistä käsitteistä.\n\nALL ja ANY ovat synonyymejä.\nACTIVE ja CURRENT ovat myös synonyymejä.\n\n| =Argumentit= | =Kuvaus= |\n| context | Tunnisteet, jotka halutaan hakea kontekstista. ALL palauttaa kaikki valittujen selainten tunnisteet, ACTIVE palauttaa yhden aktiivisen kontekstin kustakin valitusta selaimesta. |\n| browser | Selain, josta kontekstin tunnisteet halutaan hakea. ALL hakee tunnisteet kaikista avoimista selaimista, ACTIVE hakee tunnisteet vain aktiivisesta selaimesta. |\n\nAKTIIVINEN konteksti AKTIIVISESSA selaimessa on Nykyinen konteksti.\n\n[https://forum.robotframework.org/t//4264|Kommentti >>]\n"
        },
    "get_page_errors": {
        "name": "hanki_sivuvirheet",
        "doc": "Palauttaa aktiivisen sivun virheet.\n\nJos väitteitä käytetään ja ne epäonnistuvat, tämä avainsana epäonnistuu välittömästi ilman uudelleenyritystä.\n\n| =Argumentit= | =Kuvaus= |\n| assertion_operator | Valinnainen väiteoperaattori. Katso `Väitteet` lisätietoja varten. |\n| assertion_expected | Valinnainen odotettu arvo. Katso `Väitteet` lisätietoja varten. |\n| message            | Valinnainen mukautettu viesti, joka käytetään epäonnistumisen yhteydessä. Katso `Väitteet` lisätietoja varten. |\n| full               | Jos tosi, palauttaa täydellisen konsoli-lokin. Jos epätosi, palauttaa vain uudet merkinnät, jotka on lisätty viime kerran jälkeen. |\n| last               | Jos asetettu, palauttaa vain viimeiset n merkintää. Voi olla `int` merkintöjen lukumäärälle tai `timedelta` aikajaksolle. |\n\nPalautettu tieto on virhesanomien `lista`.\n\nVirhesanoma on `dict` seuraavalla rakenteella:\n| {\n|   \"name\": str,\n|   \"message\": str,\n|   \"stack\": str,\n|   \"time\": str\n| }\n\nEsimerkki:\n| [{\n|   'name': 'ReferenceError',\n|   'message': 'YT is not defined',\n|   'stack': 'ReferenceError: YT is not defined\\n    at HTMLIFrameElement.onload (https://example.com/:20:2245)',\n|   'time': '2023-02-05T20:08:48.912Z'\n| }]\n\nAvaimet:\n| =Avain= | =Kuvaus= |\n| ``name`` | Virheen nimi/tyyppi. |\n| ``message`` | Ihmisluettava virheviesti. |\n| ``stack`` | Virheen pinon jäljitys, jos annettu. |\n| ``time`` | Virheen aikaleima ISO 8601 -merkkijonona. |\n\n[https://forum.robotframework.org/t//5268|Kommentti >>]\n"
    },
    "get_page_ids": {
        "name": "hanki_sivutunnukset",
        "doc": "Palauttaa sivun tunnisteiden luettelon kontekstin ja selaimen valinnan perusteella.\nKatso `Selain, Konteksti ja Sivu` lisätietoja Sivusta ja siihen liittyvistä käsitteistä.\n\n``ALL`` ja ``ANY`` ovat synonyymejä.\n``ACTIVE`` ja ``CURRENT`` ovat myös synonyymejä.\n\n| =Argumentit= | =Kuvaus= |\n| ``page``    | Sivu, josta halutaan hakea tunnisteet. ``ALL`` Palauttaa kaikki sivun tunnisteet listana. ``ACTIVE`` Palauttaa aktiivisen sivun tunnisteen listana. |\n| ``context`` | Konteksti, josta halutaan hakea sivun tunnisteet. ``ALL`` Haetaan sivun tunnisteet kaikista konteksteista. ``ACTIVE`` Haetaan sivun tunnisteet vain aktiivisesta kontekstista. |\n| ``browser`` | Selain, josta halutaan hakea sivun tunnisteet. ``ALL`` Haetaan sivun tunnisteet kaikista avoimista selaimista. ``ACTIVE`` Haetaan sivun tunnisteet vain aktiivisesta selaimesta. |\n\nEsimerkki:\n| Testitapaus\n|     `Uusi Sivu`    http://www.imbus.de\n|     `Uusi Sivu`    http://www.reaktor.com\n|     ${current_page}=   `Get Page IDs`    ACTIVE    ACTIVE    ACTIVE\n|     Log                Nykyinen sivun tunniste on: ${current_page}[0]\n|     ${all_pages}=      `Get Page IDs`    CURRENT   CURRENT   ALL\n|     Log Monet           Nämä ovat kaikki sivun tunnisteet    @{all_pages}\n\nAKTIIVINEN sivu AKTIIVISESSA kontekstissa AKTIIVISESSA selaimessa on ``Nykyinen`` sivu.\n\n[https://forum.robotframework.org/t//4274|Kommentti >>]\n"
    },
    "launch_browser_server": {
        "name": "käynnistä_selainpalvelin",
        "doc": "Käynnistää uuden Playwright-selainpalvelimen määritetyillä asetuksilla.\n\nPalauttaa websocket-päätepisteen (wsEndpoint) merkkijonon, jota voidaan käyttää yhteyden muodostamiseen palvelimeen.\n\n| =Argumentit= | =Kuvaus= |\n| ``port`` | Portti, jota käytetään selainpalvelimelle. Oletusarvoisesti 0, mikä johtaa satunnaisesti vapaan portin määräämiseen. |\n| ``wsPath`` | Jos asetettu, Playwright kuuntelee annettua polkua pääportin lisäksi. Turvallisuuden vuoksi tämä oletusarvo on arvaamaton merkkijono. |\n\nKatso `Uusi Selain` muut argumenttiasiakirjat.\n\nKäynnistettyä selainpalvelinta voidaan käyttää siihen yhteyden muodostamiseen `Yhdistä Selaimelle` -avainsanalla.\nTätä avainsanaa voidaan käyttää myös komentoriviltä ``rfbrowser launch-browser-server`` -komennolla.\n\nKatso lisätietoja [https://playwright.dev/docs/api/class-browserserver#browser-server|Playwrightin dokumentaatiosta].\n\n[https://forum.robotframework.org/t//4306|Kommentti >>]\n"
    },
    "new_browser": {
        "name": "uusi_selain",
        "doc": "Luo uuden Playwright-selaimen määritetyillä asetuksilla.\n\nKatso `Selain, Konteksti ja Sivu` lisätietoja Selaimesta ja siihen liittyvistä käsitteistä.\n\nPalauttaa vakioitunnuksen luodulle selaimelle.\n\n| =Argumentit= | =Kuvaus= |\n| ``browser`` | Avaa määritetyn [#type-SupportedBrowsers|selaimen]. Oletusarvoisesti kromi. |\n| ``headless`` | Aseta epätodeksi, jos haluat graafisen käyttöliittymän. Oletusarvoisesti tosi. |\n| ``args`` | Lisäargumentit, jotka välitetään selaininstanssille. Chromium-lippujen luettelo löytyy [http://peter.sh/experiments/chromium-command-line-switches/|täältä]. Oletusarvoisesti Ei mitään. |\n| ``channel`` | Sallii toiminnan perusversiolla Google Chromen ja Microsoft Edgen selaimista. Katso lisätietoja: [https://playwright.dev/docs/browsers#google-chrome--microsoft-edge|Playwrightin dokumentaatiosta]. |\n| ``chromiumSandbox`` | Ota käyttöön Chromium-hiekkalaatikko. Oletusarvoisesti epätosi. |\n| ``devtools`` | Vain Chromium Onko avattava kehittäjätyökalupaneeli jokaiselle välilehdelle automaattisesti. |\n| ``downloadsPath`` | Jos määritetty, hyväksytyt lataukset ladataan tähän kansioon. Muuten luodaan väliaikainen kansio, joka poistetaan, kun selain suljetaan. Tiedoston poistamisesta katso `Lataus` ja `Lupaus Odottaa Latausta` -asiakirjat. |\n| ``env`` | Määrittää ympäristömuuttujat, jotka ovat näkyvissä selaimelle. Sanakirjan avaimet ovat muuttujanimiä, arvot ovat sisältöä. Oletusarvoisesti Ei mitään. |\n| ``executablePath`` | Polku selaimen käynnistettävään suoritettavaan tiedostoon paketoidun sijaan. Jos executablePath on suhteellinen polku, se ratkaistaan nykyisen työskentelykansion suhteen. Huomaa, että Playwright toimii vain pakatun Chromiumin, Firefoxin tai WebKitin kanssa, käytä omalla vastuullasi. Oletusarvoisesti Ei mitään. |\n| ``firefoxUserPrefs`` | Firefoxin käyttäjäasetukset. Lisätietoja Firefoxin käyttäjäasetuksista löytyy osoitteesta [https://support.mozilla.org/en-US/kb/about-config-editor-firefox|about:config]. |\n| ``handleSIGHUP`` | Sulje selaimen prosessi SIGHUP-signaalilla. Oletusarvoisesti tosi. |\n| ``handleSIGINT`` | Sulje selaimen prosessi Ctrl-C:llä. Oletusarvoisesti tosi. |\n| ``handleSIGTERM`` | Sulje selaimen prosessi SIGTERM-signaalilla. Oletusarvoisesti tosi. |\n| ``ignoreDefaultArgs`` | Jos tosi, Playwright ei välitä omia konfiguraatio-argumenttejaan, vaan käyttää vain niitä argsista. Jos annetaan lista, suodattaa annetut oletusargumentit. Vaarallinen vaihtoehto; käytä varoen. Oletusarvoisesti epätosi. |\n| ``proxy`` | Verkko [#type-Proxy|Proxy] -asetukset. Rakenne: ``{'server': <str>, 'bypass': <Optional[str]>, 'username': <Optional[str]>, 'password': <Optional[str]>}`` |\n| ``reuse_existing`` | Jos asetetaan todeksi, olemassa oleva selaininstanssi, joka vastaa samoja argumentteja, käytetään uudelleen. Jos vastaavaa määritettyä Selainta ei ole, aloitetaan uusi. Oletusarvoisesti tosi. |\n| ``slowMo`` | Hidastaa Playwright-toimintoja määritetyllä määrällä millisekunteja. Hyödyllinen, jotta voit nähdä, mitä tapahtuu. Oletusarvoisesti ei viivettä. |\n| ``timeout`` | Maksimiaika Robot Frameworkin aikamuodossa odottaa selaininstanssin käynnistymistä. Oletusarvoisesti 30 sekuntia. Aseta 0 poistaaksesi aikakatkaisun. |\n\n\n[https://forum.robotframework.org/t//4306|Kommentti >>]\n"
    },
    "new_context": {
        "name": "uusi_konteksti",
        "doc": "Luo uuden BrowserContextin määritetyillä asetuksilla.\n\nKatso `Selain, Konteksti ja Sivu` lisätietoja BrowserContextista.\n\nPalauttaa vakioitunnuksen luodulle kontekstille,\njota voidaan käyttää `Vaihda Kontekstiin` -avainsanassa.\n\n| =Argumentit=              | =Kuvaus= |\n| ``acceptDownloads``      | Määrittää, hyväksytäänkö kaikki liitteet automaattisesti. Oletusarvoisesti tosi, missä kaikki lataukset hyväksytään. |\n| ``baseURL``              | Kun käytetään `Mene`, `Odota Pyyntöä` tai `Odota Vastausta`, otetaan perus-URL huomioon käyttämällä URL()-rakentajaa vastaavan URL:n rakentamiseen. Oletusarvoisesti tyhjä. Esimerkit: ``baseURL=http://localhost:3000`` ja navigointi kohteeseen ``/bar.html`` johtaa ``http://localhost:3000/bar.html``. ``baseURL=http://localhost:3000/foo/`` ja navigointi kohteeseen ``./bar.html`` johtaa ``http://localhost:3000/foo/bar.html``. ``baseURL=http://localhost:3000/foo`` (ilman loppusidosta) ja navigointi kohteeseen ``./bar.html`` johtaa ``http://localhost:3000/bar.html``. |\n| ``bypassCSP``            | Käynnistää sivun Content-Security-Policy:n ohituksen. Oletusarvoisesti epätosi. |\n| ``colorScheme``          | Jäljittelee `'prefers-colors-scheme'` -mediominaisuutta, tuetut arvot ovat `'light'`, `'dark'`, `'no-preference'`. |\n| ``defaultBrowserType``   | Jos selainta ei ole avoinna ja `Uusi Konteksti` avaa uuden selaimen oletusarvoilla, se käyttää tätä asetusta. Erittäin hyödyllinen yhdessä `Hanki Laite` -avainsanan kanssa. |\n| ``deviceScaleFactor``    | Määritä laitelaitteiston mittakaavakerroin (voi ajatella dpr: nä). Oletusarvoisesti ``1``. |\n| ``extraHTTPHeaders``     | Sanakirja, joka sisältää lisä-HTTP-otsikot, jotka lähetetään jokaisen pyynnön kanssa. Kaikkien otsikkotietojen on oltava merkkijonoja. |\n| ``forcedColors``         | Jäljittelee `forced-colors` -mediominaisuutta, tuetut arvot ovat `active` ja `none`. |\n| ``geolocation``          | Sanakirja, joka sisältää ``latitude`` ja ``longitude`` tai ``accuracy`` jäljitelläkseen. Jos ``latitude`` tai ``longitude`` ei ole määritetty, laitteen maantieteellistä sijaintia ei ylikirjoiteta. |\n| ``hasTouch``             | Määrittää, tukeeko näkymä kosketustapahtumia. Oletusarvoisesti epätosi. |\n| ``httpCredentials``      | [https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication|HTTP-autentikoinnin] tunnukset. |\n| ``ignoreHTTPSErrors``    | Määrittää, ohitetaanko HTTPS-virheet navigoinnin aikana. Oletusarvoisesti epätosi. |\n| ``isMobile``             | Määrittää, otetaanko meta-viewport-tagi huomioon ja ovatko kosketustapahtumat käytössä. Oletusarvoisesti epätosi. |\n| ``javaScriptEnabled``    | Määrittää, otetaanko JavaScript käyttöön kontekstissa. Oletusarvoisesti tosi. |\n| ``locale``               | Määrittää käyttäjän kielen, esimerkiksi ``en-GB``, ``de-DE``, jne. |\n| ``offline``              | Käynnistää selaimen offline-tilan. Oletusarvoisesti epätosi. |\n| ``permissions``          | Lista, joka sisältää kaikki tässä kontekstissa oleville sivuille myönnettävät käyttöoikeudet. Kaikki käyttöoikeudet, joita ei ole lueteltu täällä, hylätään automaattisesti. |\n| ``proxy``                | Verkon proxy-asetukset, joita käytetään tässä kontekstissa. Oletusarvoisesti Ei mitään. *HUOMAA:* Chromiumissa Windowsilla selaimen on käynnistyttävä globaalilla proxyn kanssa tämän vaihtoehdon toimimiseksi. Jos kaikki kontekstit ohittavat proxyn, globaalia proxya ei koskaan käytetä ja se voi olla mikä tahansa merkkijono, esimerkiksi ``proxy={ server: 'http://per-context' }``. |\n| ``recordHar``            | Käynnistää [http://www.softwareishard.com/blog/har-12-spec/|HAR] tallennuksen kaikille sivuille tiedostoon. On oltava polku tiedostoon, esimerkki ${OUTPUT_DIR}/har.file. Jos ei ole määritetty, HARia ei tallenneta. Varmista, että odotat kontekstin sulkeutumista tallentaaksesi. |\n| ``recordVideo``          | Käynnistää videon tallennuksen kaikille sivuille kansioon. Jos ei määritetty, videoita ei tallenneta. Varmista, että suljet kontekstin videoiden tallentamiseksi. Videota ei tueta etäselaimissa. |\n| ``reduceMotion``         | Jäljittelee `prefers-reduced-motion` -mediominaisuutta, tuetut arvot ovat `reduce`, `no-preference`. |\n| ``screen``               | Jäljittelee johdonmukaisen ikkunan kokoisen näytön, joka on käytettävissä verkkosivun sisällä ikkunasta window.screen. Käytetään vain, kun näkymä on asetettu. Esimerkki {'width': 414, 'height': 896} |\n| ``serviceWorkers``       | Määrittää, sallitaanko sivustojen rekisteröidä Service workerit. Oletusarvoisesti 'salli'. |\n| ``storageState``         | Palauttaa `Tallenna Tallennustila` -avainsanalla luodun tallennustilan. On oltava täydellinen polku tiedostoon. |\n| ``timezoneId``           | Vaihtaa kontekstin aikavyöhykkeen. Katso [https://source.chromium.org/chromium/chromium/src/+/master:third_party/icu/source/data/misc/metaZones.txt|ICU:n metaZones.txt] tuetuista aikavyöhyketunnuksista. |\n| ``tracing``              | Tiedostonimi, johon [https://playwright.dev/docs/api/class-tracing/|jäljitystiedosto] tallennetaan. Esimerkki trace.zip tallennetaan ${OUTPUT_DIR}/traces.zip. Väliaikaiset jäljitystiedostot tallennetaan ${OUTPUT_DIR}/Browser/traces. Jos tiedostonimi on määritetty, jäljitys otetaan käyttöön kaikille kontekstin sivuille. Jäljitys suljetaan automaattisesti, kun konteksti suljetaan. Väliaikaiset jäljitystiedostot poistetaan automaattisesti kunkin testisuorituksen alussa. Jäljitystiedosto voidaan avata testisuorituksen jälkeen suorittamalla komento komentoriviltä: ``rfbrowser show-trace /path/to/trace.zip``. |\n| ``userAgent``            | Tietty käyttäjäagentti, jota käytetään tässä kontekstissa. |\n| ``viewport``             | Sanakirja, joka sisältää ``width`` ja ``height``. Jäljittelee johdonmukaista näkymää kullekin sivulle. Oletusarvoisesti 1280x720. nolla poistaa oletusnäkymän käytöstä. Jos ``width`` ja ``height`` ovat ``0``, näkymä skaalautuu ikkunan mukana. |\n\n\nEsimerkki:\n| Testaa iPhonella\n|     ${device}=    `Hanki Laite`    iPhone X\n|     `Uusi Konteksti`    &{device}        # purkamalla tässä käytetään &\n|     `Uusi Sivu`    http://esimerkki.com\n\nBrowserContext on Playwright-objekti, joka hallitsee yhtä selainprofiilia.\nKontekstissa välimuistit ja evästeet jaetaan. Katso\n[https://playwright.dev/docs/api/class-browser#browsernewcontextoptions|Playwright browser.newContext]\ntuetuista vaihtoehdoista.\n\nJos avointa Selainta ei ole, tämä avainsana avaa yhden. Ei luo sivuja.\n\n[https://forum.robotframework.org/t//4307|Kommentti >>]\n"
    },
    "new_page": {
        "name": "uusi_sivu",
        "doc": "Avaa uuden sivun.\n\n        Sivu on Playwrightin vastine välilehdelle. Katso `Selain, Konteksti ja Sivu`\n        lisätietoja Sivun käsitteestä.\n\n        | =Argumentit=   | =Kuvaus= |\n        | ``url``        | Valinnainen URL-sivulle navigoimiseksi. URL-osoitteen tulisi sisältää protokollan, esim. `https://` |\n        | ``wait_until`` | Milloin pitää katsella operaation onnistuneen, oletusarvo on load. Tapahtumat voivat olla: ``domcontentloaded`` - katsotaan operaation päättyneen, kun DOMContentLoaded-tapahtuma laukaistaan. ``load`` - katsotaan operaation päättyneen, kun lataustapahtuma laukaistaan. ``networkidle`` - katsotaan operaation päättyneen, kun verkko-yhteyksiä ei ole vähintään 500 ms. ``commit`` - katsotaan operaation päättyneen, kun verkko-vastaus on vastaanotettu ja asiakirja on aloittanut lataamisen. |\n\n\n        Palauttaa `UusiSivuTiedot` sanakirjana luodulle sivulle.\n        `UusiSivuTiedot` (dict) sisältää avaimet ``page_id`` ja ``video_path``. ``page_id`` on vakaa tunniste\n        luodulle sivulle. ``video_path`` on polku luotuun videoon tai tyhjä, jos videota ei ole\n        luotu.\n\n        Kun `Uusi Sivu` kutsutaan ilman avointa selainta, ensin suoritetaan `Uusi Selain`\n        ja `Uusi Konteksti` oletusarvoilla.\n\n        [https://forum.robotframework.org/t//4308|Kommentti >>]\n        "
    },
    "new_persistent_context": {
        "name": "uusi_pysyvä_konteksti",
        "doc": "Avaa uuden\n        [https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context | pysyvän kontekstin].\n\n        `Uusi Pysyvä Konteksti` suorittaa käytännössä `Uusi Selain`, `Uusi Konteksti` ja `Uusi Sivu` yhdessä vaiheessa asettaen samalla profiilin.\n\n        Tämä avainsana palauttaa kolmikkona selaimen tunnuksen, kontekstin tunnuksen ja sivun tiedot. (Uusi Selainversiossa 15.0.0)\n\n        | =Argumentti=               | =Kuvaus= |\n        | ``userDataDir``          | Polku käyttäjätietojen hakemistoon, joka tallentaa selaimen istuntotiedot kuten evästeet ja paikallisen tallennustilan. Lisätietoja Chromiumista ja Firefoxista. Huomaa, että Chromiumin käyttäjätietohakemisto on \"Profiilipolun\" vanhempi hakemisto, joka näkyy osoitteessa chrome://version. Anna tyhjä merkkijono käyttääksesi tilapäistä hakemistoa. |\n        | ``browser``              | Käytettävä selaintyyppi. Oletuksena on Chromium. |\n        | ``headless``             | Ajetaanko selain päättömässä tilassa. Oletusarvo on ``True``. |\n        | muut argumentit          | Katso lisätietoja muista argumenteista `Uusi Selain`, `Uusi Konteksti` ja `Uusi Sivu`. |\n\n        Jos haluat käyttää laajennuksia, sinun on ladattava laajennus .zip-tiedostona, otettava laajennuksen lataus käyttöön ja ladattava laajennukset käyttämällä chromium-argumentteja seuraavasti. Laajennukset toimivat vain chromiumin kanssa ja päättömässä selaimessa.\n\n        | ${launch_args}=  Aseta Muuttuja  [\"--disable-extensions-except=./ublock/uBlock0.chromium\", \"--load-extension=./ublock/uBlock0.chromium\"]\n        | ${browserId}  ${contextId}  ${pageDetails}=  `Uusi Pysyvä Konteksti`  selain=chromium  headless=False  url=https://robocon,io  args=${launch_args}\n\n        Tarkista `Uusi Selain`, `Uusi Konteksti` ja `Uusi Sivu` tarkkoja argumenttiohjeita varten.\n\n        [https://forum.robotframework.org/t//4309|Kommentti >>]\n        "
    },
    "open_browser": {
        "name": "avaa_selain",
        "doc": "Avaa uuden selaininstanssin. Käytä tätä avainsanaa nopeisiin kokeiluihin tai vianmäärityssessioihin.\n\n        Käytä tuotannossa ja automatisoiduissa suorituksissa `Uusi Sivu` suoraan `Avaa Selain`-sijasta.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja Selaimen ja niihin liittyvien käsitteiden suhteen.\n\n        Luo uuden selaimen, kontekstin ja sivun määritetyillä asetuksilla.\n\n\n        | =Argumentti=          | =Kuvaus= |\n        | ``url``              | Navigoi URL-osoitteeseen, jos annettu. Oletusarvo on Ei mitään. |\n        | ``browser``          | Määrittää, mitä selainta käytetään. Tuetut selaimet on lueteltu alla olevassa taulukossa. |\n        | ``headless``         | Jos asetettu epätodeksi, tarjotaan graafinen käyttöliittymä, muuten se on piilotettu. Oletusarvo on Epätosi. |\n        | ``pause_on_failure`` | Keskeytä suoritus virheen havaitessa ja jätä selain auki. Oletusarvo on Tosi. |\n        | ``bypassCSP``        | Oletusarvoisesti kiertää CSP ja mahdollistaa mukautetun skriptin liittämisen sivulle. |\n\n        Selaimet:\n\n        |   = Arvo =     |        = Nimi(et) =                                   |\n        | ``firefox``     | [https://www.mozilla.org/en-US/firefox/new|Firefox]  |\n        | ``chromium``    | [https://www.chromium.org/Home|Chromium]             |\n        | ``webkit``      | [https://webkit.org/|webkit]                         |\n\n        [https://forum.robotframework.org/t//4310|Kommentti >>]\n        "
    },
    "save_storage_state": {
        "name": "tallenna_tallennustila",
        "doc": "Tallentaa nykyisen aktiivisen kontekstin tallennustilan tiedostoon.\n\n        Verkkosovellukset käyttävät eväste- tai tunnuspohjaista todennusta, missä\n        todennettu tila tallennetaan\n        [https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies|evästeisiin]\n        tai\n        [https://developer.mozilla.org/en-US/docs/Web/API/Storage|paikalliseen tallennukseen].\n        Avainsana noutaa tallennustilan todennetuista konteksteista ja\n        tallentaa sen levylle. Tämän jälkeen `Uusi Konteksti` voidaan luoda ennaltatäytetyllä\n        tilalla.\n\n        Huomaa, että tilatiedosto saattaa sisältää salaisuuksia eikä sitä tulisi jakaa\n        organisaatiosi ulkopuolisten kanssa.\n\n        Tiedosto luodaan ${OUTPUTDIR}/browser/state -kansioon ja tiedostot\n        poistetaan automaattisesti, kun uusi testisuoritus alkaa. Avainsana\n        palauttaa tiedostopolun.\n\n        Esimerkki:\n        | Testitapaus\n        |     `Uusi konteksti`\n        |     `Uusi Sivu`    https://kirjautumissivu.html\n        |     #  Kirjautuminen\n        |     `Täytä Salainen`    id=käyttäjänimi    $käyttäjänimi\n        |     `Täytä Salainen`    id=salasana    $salasana\n        |     `Klikkaa`    id=nappi\n        |     `Hae Teksti`    id=otsikko    ==    Jotain\n        |     #  Tallenna tallennustila levylle\n        |     ${tilatiedosto} =    `Tallenna Tallennustila`\n        |     #  Luo uusi konteksti tallennetulla tilalla\n        |     `Uusi konteksti`    storageState=${tilatiedosto}\n        |     `Uusi Sivu`    https://kirjautumissivu.html\n        |     #  Kirjautumista ei tarvita, koska todennus luetaan tilatiedostosta\n        |     `Hae Teksti`    id=otsikko    ==    Jotain\n\n        [https://forum.robotframework.org/t//4318|Kommentti >>]\n        "
    },
    "set_default_run_before_unload": {
        "name": "aseta_oletusajo_ennen_purkamista",
        "doc": "Aseta oletusarvoinen runBeforeUnload-arvo, kun `Sulje Sivu` kutsutaan epäsuorasti.\n\n        Sulje Sivu kutsutaan epäsuorasti, kun\n        [https://marketsquare.github.io/robotframework-browser/Browser.html#Automatic%20page%20and%20context%20closing|sivun sulkeminen automaattisesti]\n        tapahtuu. Oletusarvo on epätosi, ja tätä avainsanaa voidaan käyttää arvon muuttamiseen.\n        Palauttaa vanhan runBeforeUnload-arvon.\n\n        [https://forum.robotframework.org/t/6203|Kommentti >>]\n        "
    },
    "switch_browser": {
        "name": "vaihda_selain",
        "doc": "Vaihtaa tällä hetkellä aktiivisen Selaimen toiseen avoinna olevaan Selaimeen.\n\n        Palauttaa vakaan tunnisteen edelliselle selaimelle.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja Selaimen ja niihin liittyvien käsitteiden suhteen.\n\n        | =Argumentit= | =Kuvaus= |\n        | id          | Selaimen tunnus, johon vaihdetaan. Esimerkki: ``selain=96207191-8147-44e7-b9ac-5e04f2709c1d``. Selaimen tunnus palautetaan `Uusi Selain`-avainsanalla, kun se käynnistetään, tai se voidaan noutaa selainluettelosta `Hae Selainluettelo`-avainsanan palauttamana. |\n\n        [https://forum.robotframework.org/t//4334|Kommentti >>]\n        "
    },
    "switch_context": {
        "name": "vaihda_konteksti",
        "doc": "Vaihtaa aktiivisen Selainkontekstin toiseen avoimeen kontekstiin.\n\n        Palauttaa vakaan tunnisteen edelliselle kontekstille.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja Kontekstin ja siihen liittyvien käsitteiden suhteen.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``id``      | Kontekstin tunnus, johon vaihdetaan. Esimerkki: ``context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089``. Kontekstin tunnus palautetaan `Uusi Konteksti`-avainsanalla, kun se käynnistetään, tai se voidaan noutaa selainluettelosta `Hae Selainluettelo`-avainsanan palauttamana. |\n        | ``selain`` | Selain, jossa etsitään kyseistä kontekstia. ``CURRENT`` nykyiselle aktiiviselle selaimelle, ``ALL`` etsiäksesi kaikissa avoimissa selaimissa tai selaimen tunnus, johon konteksti vaihdetaan. |\n\n        Esimerkki:\n        | ${ensimmäinen_konteksti} =     `Uusi Konteksti`\n        | `Uusi Sivu`             ${URL1}\n        | ${toinen_konteksti} =    `Uusi Konteksti`\n        | `Uusi Sivu`             ${URL2}\n        | `Vaihda Konteksti`       ${ensimmäinen_konteksti}    # Vaihtaa takaisin ensimmäiseen kontekstiin ja sivulle.\n\n        [https://forum.robotframework.org/t//4335|Kommentti >>]\n        "
    },
    "switch_page": {
        "name": "vaihda_sivu",
        "doc": "Vaihtaa aktiivisen selainsivun toiseen avoimeen sivulle tunnuksen ``id`` tai ``UUSI`` perusteella.\n\n        Palauttaa vakaan tunnisteen ``id`` edelliselle sivulle.\n        Katso `Selain, Konteksti ja Sivu` lisätietoja Sivun ja siihen liittyvien käsitteiden suhteen.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``id``      | Sivun tunnus tai aliaksen, johon vaihdetaan. Esimerkki: ``sivu=8baf2991-5eaf-444d-a318-8045f914e96a`` tai ``UUSI``. Voi olla merkkijono tai sanakirja, joka palautetaan `Uusi Sivu`-avainsanalla. Sivun tunnus voidaan noutaa selainluettelosta `Hae Selainluettelo`-avainsanan palauttamana. ``UUSI`` voidaan käyttää vaihtaaksesi äskettäin avattuun popup-ikkunaan, ``NYKYINEN`` voidaan käyttää vaihtaaksesi aktiiviseen sivuun eri kontekstissa tai selaimessa, joka on tunnistettu niiden tunnuksella. |\n        | ``konteksti`` | Konteksti, jossa etsitään kyseistä sivua. ``NYKYINEN`` nykyiselle aktiiviselle kontekstille, ``KAikki`` etsiäksesi kaikissa avoimissa konteksteissa tai kontekstin tunnus, johon sivu vaihdetaan. |\n        | ``selain`` | Selain, jossa etsitään kyseistä sivua. ``NYKYINEN`` nykyiselle aktiiviselle selaimelle, ``KAikki`` etsiäksesi kaikissa avoimissa selaimissa tai selaimen tunnus, johon sivu vaihdetaan. |\n\n        ``Uusi`` voi aikakatkaista, jos uusia sivuja ei ole ennen kirjaston aikakatkaisua.\n\n        Esimerkki:\n        | `Klikkaa`           painike#avautuu    # Avaa uusi sivu\n        | ${edellinen} =    `Vaihda Sivu`      UUSI\n\n        [https://forum.robotframework.org/t//4336|Kommentti >>]\n        "
    },
    "clear_permissions": {
        "name": "tyhjennä_oikeudet",
        "doc": "Tyhjentää kaikki oikeudet nykyisestä kontekstista.\n\n        [https://forum.robotframework.org/t//4236|Kommentti >>]\n        "
    },
    "go_back": {
        "name": "mene_takaisin",
        "doc": "Siirtyy edelliselle sivulle historiassa.\n\n        [https://forum.robotframework.org/t//4289|Kommentti >>]\n        "
    },
    "go_forward": {
        "name": "mene_eteenpäin",
        "doc": "Siirtyy seuraavalle sivulle historiassa.\n\n        [https://forum.robotframework.org/t//4290|Kommentti >>]\n        "
    },
    "go_to": {
        "name": "siirry",
        "doc": "Siirtyy annettuun ``url``:ään.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``url`` | Siirtymiseen käytettävä URL. |\n        | ``timeout`` | Aika odottaa sivun latautumista. Jos ei määritetty, käytetään kirjaston oletusaikakatkaisuaikaa. |\n        | ``wait_until`` | Milloin operaatio katsotaan onnistuneeksi. Oletusarvo on lataus. Tapahtumat voivat olla joko: ``domcontentloaded`` - operaatio katsotaan valmiiksi, kun DOMContentLoaded-tapahtuma laukaistaan. ``load`` - operaatio katsotaan valmiiksi, kun lataustapahtuma laukaistaan. ``networkidle`` - operaatio katsotaan valmiiksi, kun verkko-yhteyksiä ei ole vähintään 500 ms ajan. ``commit`` - operaatio katsotaan valmiiksi, kun verkkovaste on vastaanotettu ja dokumentti on aloittanut latauksen. |\n\n\n        Palauttaa navigointipyynnön HTTP-tilakoodin kokonaislukuna tai 0, jos sitä ei vastaanoteta.\n\n        [https://forum.robotframework.org/t//4291|Kommentti >>]\n        "
    },
    "grant_permissions": {
        "name": "myönnä_luvat",
        "doc": "Myöntää luvat nykyiselle kontekstille.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``permissions`` | on lista myönnettävistä luvista. Luvat voivat olla seuraavista: geolocation, notifications, camera, microphone |\n        | ``origin`` | Alkuperä, jolle luvat myönnetään, esim. \"https://esimerkki.com\". |\n\n        Esimerkki:\n        | `Uusi Konteksti`\n        | `Myönnä Luvat`    geolocation\n\n        [https://forum.robotframework.org/t//4292|Kommentti >>]\n        "
    },
    "reload": {
        "name": "lataa_uudelleen",
        "doc": "Lataa nykyisen aktiivisen sivun uudelleen.\n\n        [https://forum.robotframework.org/t//4317|Kommentti >>]\n        "
    },
    "set_browser_timeout": {
        "name": "aseta_selaimen_aikakatkaisu",
        "doc": "Asettaa suurimman osan syötteistä ja getter-avainsanojen käyttämän aikakatkaisun.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``aikakatkaisu`` | Aikakatkaisu on nykyisen playwright-kontekstin ja uusien kontekstien aikakatkaisu. Tukee Robot Frameworkin [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|aikamuotoa]. Palauttaa edellisen aikakatkaisun arvon. |\n        | ``laajuus``   | Laajuus määrittelee asetuksen voimassaoloajan. Käytettävissä olevat arvot ovat ``Globaali``, ``Kokoelma`` tai ``Testi`` / ``Tehtävä``. Katso `Laajuuden asetukset` lisätietoja varten. |\n\n        Esimerkki:\n        | ${vanha_aikakatkaisu} =    `Aseta Selaimen Aikakatkaisu`    1m 30 sekuntia\n        | Click     //button\n        | `Aseta Selaimen Aikakatkaisu`    ${vanha_aikakatkaisu}\n\n        [https://forum.robotframework.org/t//4328|Kommentti >>]\n        "
    },
    "set_geolocation": {
        "name": "aseta_maantieteellinen_sijainti",
        "doc": "Päivittää oikean kontekstin maantieteellisen sijainnin.\n\n        Leveysaste voi olla välillä -90 ja 90 ja pituusaste voi olla välillä -180 ja 180.\n        Sijainnin tarkkuuden on oltava positiivinen luku ja oletusarvo on 0. Kun\n        luodaan konteksti, myönnä ``geolocation``-oikeus sivuille lukea sen maantieteellinen sijainti.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``leveysaste`` | Leveysaste välillä -90 ja 90. |\n        | ``pituusaste`` | Pituusaste välillä -180 ja 180. |\n        | ``tarkkuus`` | Ei-negatiivinen tarkkuusarvo. Oletusarvo on 0. |\n\n        Esimerkki:\n        | ${oikeudet} =    Luo Lista    geolocation\n        | `Uusi Konteksti`    oikeudet=${oikeudet}\n        | `Aseta Maantieteellinen Sijainti`    60.173708, 24.982263    3    # Osoittaa Korkeasaareen Helsingissä.\n\n        [https://forum.robotframework.org/t//4329|Kommentti >>]\n        "
    },
    "set_offline": {
        "name": "aseta_offline_tila",
        "doc": "Vaihtaa nykyisen kontekstin offline-tilan emulaation.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``offline`` | Vaihtaa offline-tilaan. Aseta False palataksesi takaisin online-tilaan. Oletusarvo on True. |\n\n        [https://forum.robotframework.org/t//4330|Kommentti >>]\n        "
    },
    "set_retry_assertions_for": {
        "name": "aseta_uudelleenyritä_väitteet",
        "doc": "Asettaa aikakatkaisun, jota käytetään väitteiden uudelleenyrittämisessä niiden epäonnistuessa.\n\n        | =Argumentit = | =Kuvaus = |\n        | ``timeout`` | Väitteiden uudelleenyrittämisen aikakatkaisu määrittää, kuinka kauan Browser-kirjasto yrittää uudelleen väitettä todeksi. |\n        | ``scope``   | Kesto määrittää asetuksen elinkaaren. Käytettävissä olevat arvot ovat ``Global``, ``Suite`` tai ``Test`` / ``Task``. Katso lisätietoja kohdasta `Kesto`. |\n\n        Toinen avainsana `Aseta selaimen aikakatkaisu` hallitsee sitä, kuinka kauan Playwright odottaa solmun puolella, kunnes elementit täyttävät tietyt avainsanan vaatimukset.\n\n        Palauttaa väitteiden uudelleenyrittämisen aikakatkaisun aiemman arvon.\n\n        Esimerkki:\n        | `Aseta selaimen aikakatkaisu`    10 sekuntia\n        | ${vanha} =    `Aseta uudelleenyritä väitteet`    30s\n        | `Hae otsikko`    ==    Kirjautumissivu\n        | `Aseta uudelleenyritä väitteet`    ${vanha}\n\n        Esimerkki odottaa 10 sekuntia Playwrightilla saadakseen sivun otsikon, ja kirjasto yrittää uudelleen 30 sekuntia varmistaakseen, että otsikko on oikein.\n\n        [https://forum.robotframework.org/t//4331|Kommentti >>]\n        "
    },
    "set_selector_prefix": {
        "name": "aseta_valitsimen_etuliite",
        "doc": "Asettaa etuliitteen kaikille valitsimille annetussa kehikossa.\n\n        | =Argumentit = | =Kuvaus = |\n        | ``etuliite``   | Etuliite kaikille valitsimille. Etuliite ja valitsin erotetaan yhdellä välilyönnillä. Käytä ``${None}`` tai ``${EMPTY}`` poistaaksesi etuliitteen käytöstä. |\n        | ``kesto``   | Kesto määrittää asetuksen elinkaaren. Käytettävissä olevat arvot ovat ``Global``, ``Suite`` tai ``Test`` / ``Task``. Katso lisätietoja kohdasta `Kesto`. |\n\n        Palauttaa aiemman etuliitteen arvon.\n\n        Esimerkki:\n        | ${vanha} =    `Aseta valitsimen etuliite`    iframe#upotettu_sivu >>>\n        | `Klikkaa`    painike#kirjautumis_painike       # Klikkaa painiketta upotetun kehyksen sisällä valitsimella ``iframe#upotettu_sivu >>> painike#kirjautumis_painike``\n        | `Aseta valitsimen etuliite`    ${vanha}\n\n        Esimerkki klikkaa painiketta, jonka id on ``kirjautumis_painike`` upotetun kehyksen sisällä, jonka id on ``upotettu_sivu``.\n        Tuloksena oleva valitsin on ``iframe#upotettu_sivu >>> painike#kirjautumis_painike``.\n\n        Tämän etuliitteen vaikutus voidaan poistaa lisäämällä valitsimeen ``!etuliite ``, jossa on peräkkäinen välilyönti,\n        yksittäisiin avainsanakutsuihin. esim. ``!etuliite id=painike_ulkopuolella_kehystä``\n\n        `Hae elementti`, `Hae elementit`, `Hae elementti nimellä` ja `Hae elementti roolilla`\n        etuliitteeseen lisätään automaattisesti ``!etuliite ``, jotta niitä voi käyttää suoraan ilman etuliitteen asettamista ``${None}`` ennen käyttöä.\n\n        [https://forum.robotframework.org/t//4741|Kommentti >>]\n        "
    },
    "set_viewport_size": {
        "name": "aseta_näkymäkentän_koko",
        "doc": "Asettaa nykyisen sivun näkymäkentän koon määritettyihin mittoihin.\n\n        Useiden sivujen ollessa yhdessä selaimessa,\n        kullakin sivulla voi olla oma näkymäkentän koko. Kuitenkin,\n        `Uusi konteksti` mahdollistaa näkymäkentän koon (ja enemmän) asettamisen kaikille\n        myöhemmin avatuille sivuille kontekstissa kerrallaan.\n\n        `Aseta näkymäkentän koko` muuttaa sivun kokoa.\n        Monet verkkosivustot eivät odota puhelimien muuttuvan koosta,\n        joten näkymäkentän koko tulisi asettaa ennen sivulle siirtymistä\n        `Uudessa kontekstissa` ennen sivun avaamista.\n\n        | =Argumentit = | =Kuvaus = |\n        | ``leveys`` | Asettaa leveyden koon. |\n        | ``korkeus`` | Asettaa korkeuden koon. |\n\n        [https://forum.robotframework.org/t//4333|Kommentti >>]\n        "
    },
    "show_keyword_banner": {
        "name": "näytä_avainsanabanneri",
        "doc": "Ohjaa, näytetäänkö avainsanabanneri sivulla vai ei.\n\n        Avainsanakutsun banneri on CSS-kerros, joka näyttää parhaillaan suoritetun avainsanan suoraan sivulla.\n        Tämä on hyödyllistä vianmäärityksessä ja testien suorituksen näyttämisessä videon tallennuksissa.\n        Oletuksena banneria ei näytetä sivulla paitsi kun suoritetaan esittelijätilassa.\n\n        Banneria voidaan ohjata Browser-kirjaston tuontiasetuksella. (ks. `Tuonti`-osio)\n\n        | =Argumentit = | =Kuvaus = |\n        | ``näytä`` | Jos `True`, banneri näytetään sivulla. Jos `False`, banneri ei näytetä sivulla. Jos `None`, banneri näytetään sivulla vain suoritettaessa esittelijätilassa. |\n        | ``tyyli`` | Lisätyylit, jotka halutaan soveltaa banneriin. Nämä tyylit ovat CSS-asetuksia ja voivat korvata olemassa olevia asetuksia bannerille. |\n        | ``laajuus`` | Laajuus määrittelee kyseisen asetuksen elinajan. Käytettävissä olevat arvot ovat ``Global``, ``Suite`` tai ``Test`` / ``Task``. Katso lisätietoja kohdasta `Laajuus`. |\n\n        Esimerkki:\n        | Näytä Avainsanabanneri     True    top: 5px; bottom: auto; left: 5px; background-color: #00909077; font-size: 9px; color: black;   # Näyttää bannerin vasemman yläkulman kulmassa mukautetuilla tyyleillä\n        | Näytä Avainsanabanneri     False   # Piilottaa bannerin\n\n        [https://forum.robotframework.org/t//4716|Kommentti >>]\n        "
    },
    "take_screenshot": {
        "name": "ota_näyttökuva",
        "doc": "Ottaa kuvakaappauksen nykyisestä ikkunasta tai elementistä ja tallentaa sen levylle.\n\n        | =Argumentit = | =Kuvaus = |\n        | ``tiedostonimi`` | Tiedostonimi, johon tallennetaan. Tiedosto tallennetaan oletuksena robot-kehyksen  ${OUTPUTDIR}/browser/screenshot-hakemistoon, mutta sitä voidaan muokata antamalla mukautettu polku tai tiedostonimi. Merkkijono ``{indeksi}`` tiedostonimessä korvataan rullaavalla numerolla. Käytä tätä, jotta et korvaa tiedostonimiä. Jos tiedostonimi on EMBED (kirjoitusasulla ei ole väliä) tai ${NONE}, kuvakaappaus upotetaan Base64-kuvana log.html-tiedostoon. Kuva tallennetaan väliaikaisesti levylle ja näytetään varoitus, jos väliaikaisen tiedoston poistaminen epäonnistuu. ${OUTPUTDIR}/browser/-hakemisto poistetaan ensimmäisen suorituskerran alussa. |\n        | ``valitsija`` | Ota kuvakaappaus valitsimen avulla löytyvästä elementistä. Katso lisätietoja valitsimien etsimisestä osiosta `Elementtien etsiminen`. Jos valitsinta ei anneta, otetaan kuvakaappaus nykyisestä näkymästä. |\n        | ``rajaa`` | Rajaa otettu kuvakaappaus annettuun laatikkoon. Se ottaa saman sanakirjan kuin `Hanki rajauslaatikko` palauttaa. Leikkaus toimii vain sivun kuvakaappauksessa, jos valitsinta ei ole annettu. |\n        | ``poistaAnimaatiot`` | Kun asetetaan arvoon ``True``, pysäyttää CSS-animaatiot, CSS-siirtymät ja verkkosivuanimaatiot. Animaatiot käsitellään eri tavalla niiden keston perusteella:  - rajalliset animaatiot nopeutetaan loppuun, joten ne laukaisevat transitionend-tapahtuman.  - äärettömät animaatiot peruutetaan alkutilaan ja toistetaan sitten uudelleen kuvakaappauksen jälkeen. |\n        | ``tiedostotyyppi`` | ``png`` tai ``jpeg`` Määritä kuvakaappauksen tyyppi. Oletusarvo on ``png``. |\n        | ``kokosivu`` | Kun True, ottaa kuvakaappauksen koko sivun pituudelta sen sijaan, että otettaisiin nykyinen näkyvä näkymä. Oletusarvo on False. |\n        | ``loki_kuvakaappaus`` | Kun asetetaan ``False``, kuvakaappaus otetaan, mutta sitä ei kirjata log.html-tiedostoon. |\n        | ``maski`` | Määritä valitsimet, jotka tulee peittää, kun kuvakaappaus otetaan. Peitetyt elementit peitetään vaaleanpunaisella laatikolla ``#FF00FF``, joka peittää kokonaan sen rajauslaatikon. Argumentti voi ottaa yksittäisen valitsinmerkkijonon tai useiden eri elementtien valitsinmerkkijonon listan, jos useita eri elementtejä tulee peittää. |\n        | ``maskinVäri`` | Määritä peitteen laatikon väri valituille elementeille CSS-värimuodossa. Oletusväri on vaaleanpunainen #FF00FF. |\n        | ``jätäTaustaPois`` | Piilottaa oletusvalkoisen taustan ja mahdollistaa kuvakaappausten ottamisen läpinäkyvyydellä. Ei sovellu jpeg-kuville. |\n        | ``laatu`` | Kuvan laatu välillä 0-100. Ei sovellu png-kuville. |\n        | ``mittakaava`` | ``css`` tai ``laite``. ``css`` pienentää kuvan kokoa ja ``laite`` säilyttää kuvan alkuperäisessä koossa. Oletusarvo on ``laite``. |\n        | ``palauta_muodossa`` | Määrittelee, mitä tämä avainsana palauttaa. Mahdolliset arvot on dokumentoitu `Kuvakaappauksen palautustyyppi`-osiossa. Se voi olla joko polku kuvakaappauksen tiedostoon merkkijonona tai Path-objektina tai kuvan tiedot tavuina tai base64-koodattuna merkkijonona. |\n        | ``aikakatkaisu`` | Enimmäisaika, kuinka kauan kuvakaapauksen ottaminen voi kestää, oletuksena kirjaston aikakatkaisu. Tukee Robot Frameworkin aikamuotoa, kuten 10s tai 1 min, välitä 0 poistaaksesi aikakatkaisun käytöstä. Oletusarvon voi muuttaa käyttämällä `Aseta selaimen aikakatkaisu`-avainsanaa. |\n\n        Avainsana käyttää tiukkaa tilaa, jos valitsin on määritelty. Katso lisätietoja tiukasta tilasta kohdasta `Elementtien etsiminen`.\n\n        Esimerkki\n        | `Ota näyttökuva`                                 # Ottaa kuvakaappauksen sivusta oletustiedostonimellä\n        | `Ota näyttökuva`   valitsin=id=käyttäjänimi_kenttä    # Ottaa kuvakaappauksen elementistä kuvan\n        | # Ottaa kuvakaappauksen jpeg-laajennuksella, määrittelee kuvan laadun ja aikakatkaisun, kuinka kauan kuvakaapauksen ottaminen voi kestää\n        | `Ota näyttökuva`   kokosivu=True    tiedostotyyppi=jpeg    laatu=50    aikakatkaisu=10s\n        | `Ota näyttökuva`   EMBED                         # Kuvakaappaus upotetaan Base64-kuvana log.html-tiedostoon.\n\n        [https://forum.robotframework.org/t//4337|Kommentti >>]\n        "
    },
    "add_cookie": {
        "name": "lisää_eväste",
        "doc": "Lisää evästeen nykyiseen aktiiviseen selaimen kontekstiin.\n\n\n        | =Argumentit= | =Kuvaus= |\n        | ``nimi`` | Evästeen nimi. |\n        | ``arvo`` | Annetaan arvo evästeelle. |\n        | ``url`` | Annetaan URL evästeelle. Oletusarvoisesti ei mitään. Joko ``url`` tai ``domain`` / ``path`` -pari on määritettävä. |\n        | ``domain`` | Annetaan evästeen verkkotunnus. Oletusarvoisesti ei mitään. Joko ``url`` tai ``domain`` / ``path`` -pari on määritettävä. |\n        | ``polku`` | Annetaan polku evästeelle. Oletusarvoisesti ei mitään. Joko ``url`` tai ``domain`` / ``path`` -pari on määritettävä. |\n        | ``vanhentuminen`` | Annetaan evästeen vanhentumisaika. Voi olla päivämäärämuodossa tai unix-aikana. Tukee samoja muotoja kuin [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime] -kirjasto tai epoch-timestamppi. - esimerkki: 2027-09-28 16:21:35 |\n        | ``httpVain`` | Asettaa httpOnly-tunnuksen. |\n        | ``turvallinen`` | Asettaa turvallisen tunnuksen. |\n        | ``samaSivu`` | Asettaa samesite-tilan. |\n\n        Esimerkki:\n        | `Lisää Eväste`   foo   bar   http://osoite.com/polku/sivusto                                       # Käyttäen url-argumenttia.\n        | `Lisää Eväste`   foo   bar   verkkotunnus=esimerkki.com                polku=/foo/bar                     # Käyttäen verkkotunnusta ja url-argumentteja.\n        | `Lisää Eväste`   foo   bar   http://osoite.com/polku/sivusto   vanhentuminen=2027-09-28 16:21:35        # Vanhentuminen aikaleimana.\n        | `Lisää Eväste`   foo   bar   http://osoite.com/polku/sivusto   vanhentuminen=1822137695                 # Vanhentuminen epoch-sekunteina.\n\n        [https://forum.robotframework.org/t//4233|Kommentti >>]\n        "
    },
    "delete_all_cookies": {
        "name": "poista_kaikki_evästeet",
        "doc": "Poistaa kaikki evästeet nykyisestä aktiivisesta selaimen kontekstista.\n\n        [https://forum.robotframework.org/t//4244|Kommentti >>]\n        "
    },
    "eat_all_cookies": {
        "name": "syö_kaikki_evästeet",
        "doc": "Syö kaikki evästeet kaikille pääsiäisille.\n\n        [https://forum.robotframework.org/t//4250|Kommentti >>]\n        "
    },
    "get_cookie": {
        "name": "hae_eväste",
        "doc": "Palauttaa evästeen tiedot ``name`` mukaan joko Robot Frameworkin piste-sanakirjana tai merkkijonona.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``cookie`` | Haettavan evästeen nimi. |\n        | ``return_type`` | Paluuarvon tyyppi. Voi olla joko ``dictionary`` tai ``string``. Oletusarvo on ``dictionary``. |\n\n        Jos ``return_type`` on ``dictionary`` tai ``dict``, avainsana palauttaa Robot Frameworkin\n        [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items|piste-sanakirjan]\n        Sanakirja sisältää kaikki mahdolliset evästeen avain-arvo-parit. Jos ``return_type`` on ``string`` tai ``str``,\n        avainsana palauttaa evästeen merkkijonona muodossa: ``nimi1=arvo1``. Paluuarvo sisältää vain\n        ``name`` ja ``value`` -avaimet evästeestä.\n\n        Jos evästettä ei löydy ``name``:n perusteella, avainsana epäonnistuu. Evästeen sanakirja sisältää\n        yksityiskohtia evästeestä. Sanakirjassa saatavilla olevat avaimet on dokumentoitu alla olevassa taulukossa.\n\n        | *Arvo*   | *Selitys*                                                                                  |\n        | name     | Evästeen nimi, pakollinen.                                                                |\n        | value    | Evästeen arvo, pakollinen.                                                                |\n        | url      | Määrittelee evästeen soveltamisalan, mihin URL-osoitteisiin evästeitä tulisi lähettää.   |\n        | domain   | Määrittelee, mitkä isäntäkoneet saavat vastaanottaa evästeen.                              |\n        | path     | Ilmaisee URL-polun, joka on oltava pyydettyä URL-osoitetta varten, esimerkiksi `/`.        |\n        | expiry   | Evästeen elinikä. Palautetaan datetime-objektina tai None, jos kelvollista aikaa ei saatu. |\n        | httpOnly | Kun tosi, evästettä ei voi käyttää JavaScriptin kautta.                                    |\n        | secure   | Kun tosi, evästettä käytetään vain HTTPS-yhteyksissä.                                       |\n        | sameSite | Attribuutti mahdollistaa palvelimien vaatia, ettei evästettä lähetetä ristiinoriginpyynnöissä. |\n\n        Katso\n        [https://playwright.dev/docs/api/class-browsercontext#browsercontextaddcookiescookies|playwright-dokumentaatiosta]\n        lisätietoja kustakin ominaisuudesta.\n\n        Esimerkki:\n        | ${eväste}=        `Hae Eväste`              Foobar\n        | Pitäisi Olla Sama   ${eväste.value}           Tidii\n        | Pitäisi Olla Sama   ${eväste.expiry.year}     ${2020}\n\n        [https://forum.robotframework.org/t//4265|Kommentti >>]\n        "
    },
    "get_cookies": {
        "name": "hae_evästeet",
        "doc": "Palauttaa evästeet nykyisestä aktiivisesta selaimen kontekstista.\n\n        Jos ``return_type`` on ``dictionary`` tai ``dict``, avainsana palauttaa Robot Frameworkin\n        [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items|piste-sanakirjoja]\n        Sanakirja sisältää kaikki mahdolliset evästeen avain-arvo-parit. Katso `Hae eväste` -avainsanan dokumentaatiosta\n        sanakirjan avaimet ja arvot.\n\n        Jos ``return_type`` on ``string`` tai ``str``, avainsana palauttaa evästeen merkkijonona muodossa:\n        ``nimi1=arvo1; nimi2=arvo2; nimi3=arvo3``. Paluuarvo sisältää vain evästeen ``name`` ja ``value`` -avaimet.\n\n        [https://forum.robotframework.org/t//4266|Kommentti >>]\n        "
    },
    "crawl_site": {
        "name": "selaa_sivustoa",
        "doc": "\n        Verkkorobotti on työkalu, joka käy läpi kaikki tietyn URL-osoitteen verkkotunnuksen sivut.\n        Tämä tapahtuu löytämällä kaikki samalle sivustolle johtavat linkit ja avaamalla ne.\n\n        palauttaa luettelon haetuista URL-osoitteista.\n\n        | =Argumentit = | =Kuvaus= |\n        | ``url`` | on sivu, josta aloitetaan selaaminen. |\n        | ``page_crawl_keyword`` | on avainsana, joka suoritetaan jokaisella sivulla. Oletuksena se ottaa kuvakaappauksen jokaiselta sivulta. |\n        | ``max_number_of_page_to_crawl`` | on yläraja sivujen haulle. Haun lopetetaan, jos haettujen sivujen määrä ylittää tämän. |\n        | ``max_depth_to_crawl`` | on yläraja peräkkäisille linkeille, jotka seuraavat aloitussivulta. Haun lopetetaan, jos tämän syvyyden alapuolella ei ole enää linkkejä. |\n\n        [https://forum.robotframework.org/t//4243|Kommentti >>]\n        "
    },
    "get_device": {
        "name": "hae_laite",
        "doc": "Hakee yksittäisen laitteen kuvauksen, jonka nimi täsmää tarkasti annettuun nimeen.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``name`` | Haluttu laitteen nimi. Katso Playwrightin [https://github.com/microsoft/playwright/blob/master/packages/playwright-core/src/server/deviceDescriptorsSource.json|deviceDescriptorsSource.json] muotoiltu luettelo. |\n\n        Sallii tiiviin syntaksin verkkosivujen testausarvojen asettamiseksi tiettyihin\n        mobiililaitteisiin täsmäävillä tarkkuuksilla.\n\n        Käytä sitä välittämällä siihen liittyvä kontekstiin. Laitekuvauksen kanssa kontekstin luomisen jälkeen\n        varmista, että aktiivinen sivusi on kyseisessä kontekstissa.\n        Käyttö:\n\n        | ${laite}=           `Hae Laite`       iPhone X\n        | `Uusi Konteksti`    &{laite}\n        | `Uusi Sivu`\n        | `Hae Näyttökoko`   # palauttaa { \"width\": 375, \"height\": 812 }\n\n        [https://forum.robotframework.org/t//4267|Kommentti >>]\n        "
    },
    "get_devices": {
        "name": "hae_laitteet",
        "doc": "Palauttaa sanakirjan kaikista Playwrightin laitekuvauksista.\n\n        Katso Playwrightin\n        [https://github.com/microsoft/playwright/blob/master/packages/playwright-core/src/server/deviceDescriptorsSource.json|deviceDescriptorsSource.json]\n        muotoiltu luettelo.\n\n        [https://forum.robotframework.org/t//4268|Kommentti >>]\n        "
    },
    "add_style_tag": {
        "name": "lisää_tyyli_tagi",
        "doc": "Lisää <style type=\"text/css\"> -tagin sisällön kanssa.\n\n        | =Arguments= | =Kuvaus= |\n        | ``sisältö`` | Raaka CSS-sisältö ruiskutettavaksi kehykseen. |\n\n        Esimerkki:\n        | `Lisää Tyyli Tagi`    \\#käyttäjänimi_kenttä:focus {taustaväri: akva;} |\n\n        [https://forum.robotframework.org/t//4234|Kommentti >>]\n        "

    },
    "download": {
        "name": "lataa",
        "doc": "Lataa annetun URL-osoitteen sisältö.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``url`` | URL-osoite, josta tiedosto ladataan. |\n        | ``saveAs`` | Polku, johon tiedosto tallennetaan pysyvästi. Jos tyhjä, käytetään luotua ainutlaatuista polkua (GUID), ja tiedosto poistetaan, kun konteksti suljetaan. |\n        | ``wait_for_finished`` | Jos asetettu arvoon ``False``, avainsana palauttaa heti, kun lataus on aloitettu. Oletuksena ``True``. |\n        | ``download_timeout`` | Aikakatkaisu itse lataukselle, jos ``wait_for_finished`` on asetettu ``True``-arvoon. Oletuksena aikakatkaisua ei ole asetettu. |\n\n        Avainsana palauttaa `DownloadInfo` -tyyppisen sanakirjan.\n\n"
    },
    "evaluate_javascript": {
        "name": "arvioi_javascript",
        "doc": "Suorittaa annetun JavaScript-koodin valituilla elementeillä tai sivulla.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``selector`` | Valitsin, joka ratkaistaan ja välitetään JavaScript-funktiolle. Tämä on ensimmäinen argumentti, jonka funktio vastaanottaa, jos ei ole ``${None}``. ``selector`` on valinnainen ja sitä voidaan jättää pois. Jos annetaan valitsin, funktio on välttämätön, jossa on argumentti elementin käsittelijän tallentamiseksi. Esimerkiksi ``(elementti) => document.activeElement === elementti`` Katso `Elementtien löytäminen` -osio lisätietoja valitsimista. |\n        | ``*funktio`` | Kelvollinen JavaScript-funktio tai JavaScript-funktion runko. Näitä argumentteja voidaan käyttää luettavan monirivisen JavaScriptin kirjoittamiseen. |\n        | ``arg`` | Lisäargumentti, joka voidaan välittää JavaScript-funktiolle. Tämän argumentin on oltava JSON-sarjoitettavissa. Elementtikäsittelijöitä ei tueta. |\n        | ``all_elements`` | Määrittää, annetaanko funktiolle vain yksi valitsimella löydetty elementtikäsittelijä vai jos asetettu arvoon ``True``, kaikki löydetyt elementit annetaan taulukkona. |\n\n        Esimerkki ``all_elements=True``:n kanssa:\n        |  ${tekstit}=    Arvioi JavaScript    painike\n        |  ...    (elementit, arg) => {\n        |  ...        let teksti = []\n        |  ...            for (e of elementit) {\n        |  ...                console.log(e.innerText)\n        |  ...                teksti.push(e.innerText)\n        |  ...            }\n        |  ...        teksti.push(arg)\n        |  ...        return teksti\n        |  ...    }\n        |  ...    all_elements=True\n        |  ...    arg=Vain toinen teksti\n\n        Avainsana käyttää tiukkaa tilaa, jos ``all_elements`` on ``False``. Katso `Elementtien löytäminen` lisätietoja tiukasta tilasta.\n\n        [https://github.com/MarketSquare/robotframework-browser/tree/main/atest/test/06_Examples/js_evaluation.robot | Käyttöesimerkit. ]\n\n        [https://forum.robotframework.org/t//4251|Kommentti >>]\n        "
    },
    "highlight_elements": {
        "name": "korosta elementtejä",
        "doc": "Lisää korostuksen elementteihin, jotka vastaavat ``selector``-valitsinta. Tarjoaa tyylisäädön.\n\n        Palauttaa korostettujen elementtien lukumäärän. Avainsana ei epäonnistu, jos `locator` ei vastaa yhtäkään elementtiä\n        sivulla. Avainsana ei vieritä elementtejä näkymään, ja korostettu elementti voi olla näkymän ulkopuolella. Käytä `Scroll To Element`-avainsanaa vierittääksesi elementti näkymään.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``selector`` | Valitsimet, jotka halutaan korostaa. Katso `Elementtien etsiminen` -osio tarkempien valitsintietojen saamiseksi. |\n        | ``duration`` | Määrittää kuinka kauan valitsin pysyy korostettuna. Oletusarvoisesti ``5s`` => 5 sekuntia. |\n        | ``width`` | Asettaa korostuksen reunuksen leveyden. Oletusarvo on 2px. |\n        | ``style`` | Asettaa reunuksen tyylin. Oletusarvo on pisteviiva. |\n        | ``color`` | Asettaa reunuksen värin. Kelvollisia värejä ovat esimerkiksi: ``red``, ``blue``, ``yellow``, ``pink``, ``black`` |\n\n        Avainsana ei epäonnistu, vaikka valitsin ratkaisisi useisiin elementteihin.\n\n        Esimerkki:\n        | `Korosta elementit`    input#kirjautumispainike    kesto=200ms\n        | ${lukumäärä} =    `Korosta elementit`    input#kirjautumispainike    kesto=200ms    leveys=4px    tyyli=solid    väri=\\#FF00FF\n        | Pitäisi olla yhtä suuri    ${lukumäärä}    ${5}\n\n        [https://forum.robotframework.org/t//4294|Kommentti >>]\n        "
    },
    "set_assertion_formatters": {
        "name": "aseta väitteen muotoilijat",
        "doc": "Aseta väitteiden muotoilijat avainsanoille.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``formatters`` | Avainsanojen ja muotoilijoiden sanakirja, jossa avain on avainsanan nimi, johon muotoilijat ovat sovellettu. Sanakirjan arvo on luettelo muotoilijoista, jotka ovat käytössä. Määritellyn avainsanan muotoilijat korvataan aina. Tyhjä luettelo poistaa kaikki muotoilijat avainsanasta. Jos ``formatters`` on tyhjä sanakirja, silloin kaikki muotoilijat poistetaan kaikista avainsanoista. |\n        | ``scope`` | Määrittää muotoilijan eliniän, mahdolliset arvot ovat Global, Suite ja Test. |\n\n        Katso `FormatterTypes` -tyypin dokumentaatiota lisätietoja varten.\n\n        On mahdollista määrittää omia muotoilijoita lambda-funktioina.\n\n        Esimerkki:\n        | `Aseta väitteiden muotoilijat`    {\"Hanki teksti\": [\"strip\", \"normaalitilassa välit\"]}  # Tämä muuttaa kaikki välit yhdeksi välilyönniksi ja poistaa välilyönnit merkkijonon alusta ja lopusta.\n        | `Aseta väitteiden muotoilijat`    {\"Hanki otsikko\": [\"sovelletaan odotettuun\",\"lambda x: x.replace(' ', '')\"]}  # Tämä poistaa kaikki välit merkkijonosta.\n        "
    },
    "check_checkbox": {
        "name": "valiste valintaruutu",
        "doc": "Tarkistaa valintaruudun tai valitsee valintapainikkeen, jonka löytää ``selector``-valitsimen avulla.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``selector`` | Valintaruudun valitsin. Katso `Elementtien etsiminen` -osio tarkempien valitsintietojen saamiseksi. |\n        | ``force`` | Aseta Trueksi ohittaaksesi Playwrightin [https://playwright.dev/docs/actionability | Toimintakyvyn tarkistukset]. |\n\n        Avainsana käyttää tiukkaa tilaa, katso `Elementtien etsiminen` lisätietoja tiukasta tilasta.\n\n        Ei tee mitään, jos elementti on jo tarkistettu/valittu.\n\n        [https://forum.robotframework.org/t//4235|Kommentti >>]\n        "
    },
    "clear_text": {
        "name": "tyhjenna_teksti",
        "doc": "Tyhjentää tekstikentän, joka löytyy ``selector``-valitsimen avulla.\n\n        | =Argumentit= | =Kuvaus= |\n        | ``selector`` | Tekstikentän valitsin. Katso `Elementtien etsiminen` -osio tarkempien valitsintietojen saamiseksi. |\n\n        Avainsana käyttää tiukkaa tilaa, katso `Elementtien etsiminen` lisätietoja tiukasta tilasta.\n\n        [https://forum.robotframework.org/t//4237|Kommentti >>]\n        "
    },
    "click": {
        "name": "klikkaus",
        "doc": "Simuloi hiiren napsautusta elementissä, joka löytyy ``selector``-valitsimen avulla.\n\n        Tämä avainsana napsauttaa elementtiä, joka vastaa ``selector``-valitsinta suorittamalla seuraavat vaiheet:\n        - Etsi elementti, joka vastaa valitsinta. Jos sellaista ei ole, odota, kunnes vastaava elementti liitetään DOM:aan.\n        - Odota toimintakyvyn tarkistuksia vastaavalle elementille, ellei ``force``-valintaa ole asetettu.\n          Jos elementti irrotetaan tarkistusten aikana, koko toiminto yritetään uudelleen.\n        - Vieritä elementti näkymään tarvittaessa.\n        - Käytä `Mouse Button` -toimintoa napsauttaaksesi elementin keskellä tai määritetyssä sijainnissa.\n        - Odota aloitettua siirtymistä joko onnistuakseen tai epäonnistuakseen.\n\n\n        | =Argumentit= | =Kuvaus= |\n        | ``selector`` | Napsautettava valitsimeen liittyvä elementti. Katso `Elementtien etsiminen` -osio tarkempien valitsintietojen saamiseksi. |\n        | ``button`` | Oletusarvo on ``left``, jos se on virheellinen. |\n\n        Avainsana käyttää tiukkaa tilaa, katso `Elementtien etsiminen` lisätietoja tiukasta tilasta.\n\n        Esimerkki:\n        | `Click`    id=button_location\n        | `Click`    id=button_location    left\n        | `Click`    id=button_location    right\n\n        [https://forum.robotframework.org/t//4238|Kommentti >>]\n        "
    },
    "click_with_options": {
        "name": "napsauta_vaihtoehtoja",
        "doc": "Simuloi hiiren napsautusta elementtiin, joka löytyy ``valitsimella``.\n\nTämä avainsana napsauttaa elementtiä, joka vastaa ``valitsinta``, suorittamalla seuraavat vaiheet:\n- Etsi elementti, joka vastaa valitsinta. Jos sellaista ei löydy, odota, kunnes vastaava elementti on liitetty DOM:iin.\n- Odota toimintakyvyn tarkistuksia vastaavalla elementillä, ellei ``pakota`` -valintaa ole asetettu.\nJos elementti irrotetaan tarkistusten aikana, koko toiminto yritetään uudelleen.\n- Vieritä elementti näkyviin tarvittaessa.\n- Käytä `Hiiren painiketta` napsauttaaksesi elementin keskellä tai määritetyssä sijainnissa.\n- Odota aloitettua siirtymää, kunnes se onnistuu tai epäonnistuu, ellei ``noWaitAfter`` -valintaa ole asetettu.\n\n\n| =Argumentit = | =Kuvaus= |\n| ``valitsin`` | Valitsimelementti, jota napsautetaan. Katso `Elementtien löytäminen` -osiosta lisätietoja valitsimista. |\n| ``painike`` | Oletusarvoisesti ``vasen``, jos virheellinen. |\n| ``*muokkaajat`` | Painettavat muokkausnäppäimet. Varmistaa, että napsautuksen aikana painetaan vain näitä muokkaajia ja palauttaa sitten nykyiset muokkaajat takaisin. Ellei määritetty, käytetään tällä hetkellä painettuja muokkaajia. Muokkaajat voidaan määrittää missä tahansa järjestyksessä, ja useita muokkaajia voidaan määrittää. Kelpaavia muokkausnäppäimiä ovat ``Control``, ``Alt``, ``Shift`` ja ``Meta``. Koska argumentti `*muokkaajat` on vain paikallinen argumentti, kaikki sitä edeltävät avainsanat on määritettävä paikallisina argumentteina ennen `*muokkaajia`. |\n| ``napsautuslaskuri`` | Oletusarvoisesti 1. |\n| ``viive`` | Aika odottaa hiiren painalluksen ja vapautuksen välillä. Oletusarvoisesti 0. |\n| ``sijainti_x`` ``sijainti_y`` | Piste, johon napsautetaan suhteessa elementin rajauslaatikon vasempaan yläkulmaan. Vain positiiviset arvot rajauslaatikossa ovat sallittuja. Ellei määritetty, napsauttaa jotakin näkyvää pistettä elementissä. |\n| ``pakota`` | Aseta ``True`` ohittaaksesi Playwrightin toimintakyvyn tarkistukset (https://playwright.dev/docs/actionability). |\n| ``eiOdotaJälkeen`` | Toimet, jotka aloittavat siirtymän, odottavat näitä siirtymiä tapahtuvan ja sivujen lataamisen aloittamista. Voit poistua odottamasta asettamalla tämän lipun. Tarvitset tätä vaihtoehtoa vain poikkeustapauksissa, kuten siirryttäessä saavuttamattomille sivuille. Oletusarvo on ``False``. |\n| ``koe`` | Kun tämä on asetettu, tämä metodi suorittaa vain toimintakyvyn tarkistukset ja ohittaa toiminnon. Oletusarvoisesti epätosi. Hyödyllinen odottamaan, kunnes elementti on valmis toimintaa varten ilman sen suorittamista. |\n\nArgumentit ``napsautuslaskuri``, ``viive``, ``sijainti_x``, ``sijainti_y``, ``pakota``, ``eiOdotaJälkeen`` ja ``koe`` ovat nimettyjä argumentteja ja ne on määritettävä niiden nimillä..\n\nAvainsana käyttää tiukkaa tilaa, katso `Elementtien löytäminen` lisätietoja tiukasta tilasta.\n\nEsimerkki:\n| `Napsauta Vaihtoehtoja`    id=button_location\n| `Napsauta Vaihtoehtoja`    id=button_location    koe=True\n| `Napsauta Vaihtoehtoja`    \\#napsautaVaihtoehdoilla    viive=100ms    napsautuslaskuri=2\n| `Napsauta Vaihtoehtoja`    id=napsautaMuokkaajilla    vasen     Alt    Meta    Shift    napsautuslaskuri=1    pakota=True\n| `Napsauta Vaihtoehtoja`    id=napsautaVaihtoehdoilla    oikea    napsautuslaskuri=2    pakota=True    eiOdotaJälkeen=True\n\n[https://forum.robotframework.org/t//5936|Kommentti >>]\n"
    },
    "deselect_options": {
        "name": "poista_valinnat",
        "doc": "Poistaa kaikki vaihtoehdot valitusta valintaelementistä, joka löytyy ``valitsimella``.\n\n| =Argumentit= | =Kuvaus= |\n| ``valitsin`` | Valitun valinta-elementin valitsin. Katso `Elementtien löytäminen` -osio tarkempia tietoja valitsimista. |\n\nJos haluat valita yhden tai useampia tiettyjä vaihtoehtoja ja tällä hetkellä on valittuna enemmän vaihtoehtoja,\nkäytä `Valitse vaihtoehdot` -avainsanaa valitaksesi lopussa valittavat vaihtoehdot.\n\nAvainsana käyttää tiukkaa tilaa, katso `Elementtien löytäminen` tarkempia tietoja tiukasta tilasta.\n\n[https://forum.robotframework.org/t//4245|Kommentti >>]\n"
    },
    "drag_and_drop": {
        "name": "vedä_ja_pudota",
        "doc": "Suorittaa Vedä&Pudota -toiminnon elementistä, joka on valittu ``lähteellä`` olevan elementin kautta elementtiin, joka on valittu ``kohdalla``.\n\n| =Argumentit= | =Kuvaus= |\n| ``lähteen_valitsin`` | Määrittää elementin, jonka keskipiste on lähtöpiste. |\n| ``kohdan_valitsin`` | Määrittää elementin, jonka keskipiste on lopetuspiste. |\n| ``askeleet`` | Määrittelee, kuinka monta välivaiheen hiiren liike-tapahtumaa lähetetään. Usein on tarpeen lähettää useampi kuin yksi välivaiheen tapahtuma halutun tuloksen saamiseksi. Oletusarvo on 1. |\n\nKatso `Elementtien löytäminen` -osio tarkempia tietoja valitsimista.\n\nEnsin se siirtää hiiren lähtöpisteeseen,\nsitten painaa vasenta hiiren painiketta,\nsitten siirtyy määrättyyn määrään askeleita lopetuspisteeseen,\nsitten vapauttaa hiiren painikkeen.\n\nLähtö- ja lopetuspiste määritellään elementin rajauslaatikon keskipisteen perusteella.\n\nAvainsana käyttää tiukkaa tilaa, katso `Elementtien löytäminen` tarkempia tietoja tiukasta tilasta.\n\nEsimerkki\n| `Vedä Ja Pudota`    \"Ympyrä\"    \"Tavoite\"\n\n[https://forum.robotframework.org/t//4247|Kommentti >>]\n"
    },
    "drag_and_drop_by_coordinates": {
        "name": "vedä_ja_pudota_koordinaattien_perusteella",
        "doc": "Suorittaa Vedä&Pudota -toiminnon koordinaatista toiseen koordinaattiin.\n\nEnsin se siirtää hiiren lähtöpisteeseen,\nsitten painaa vasenta hiiren painiketta,\nsitten siirtyy määrättyyn määrään askeleita lopetuspisteeseen,\nsitten vapauttaa hiiren painikkeen.\n\nLähtö- ja lopetuspiste määritellään ``x`` ja ``y`` -koordinaattien perusteella\nsivun näkymän vasemman yläkulman suhteen.\n\n| ``from_x`` & ``from_y`` | Määrittävät aloituspisteen sivulla. |\n| ``to_x`` & ``to_y`` | Määrittävät lopetuspisteen. |\n| ``askeleet`` | Määrittelee, kuinka monta välivaiheen hiiren liike-tapahtumaa lähetetään. Usein on tarpeen lähettää useampi kuin yksi välivaiheen tapahtuma halutun tuloksen saamiseksi. Oletusarvo on 1. |\n\nEsimerkki:\n| `Vedä Ja Pudota Koordinaattien Perusteella`\n| ...    from_x=30    from_y=30\n| ...    to_x=10    to_y=10    askeleet=20\n\n[https://forum.robotframework.org/t//4248|Kommentti >>]\n"
    },
    "drag_and_drop_relative_to": {
        "name": "drag_and_drop_relative_to",
        "doc": "Executes a Drag&Drop operation from the element selected by ``selector_from``\n        to coordinates relative to the center of that element.\n\n        This keyword can be handy to simulate swipe actions.\n\n        | =Arguments= | =Description= |\n        | ``selector_from`` | identifies the element, which center is the start-point. |\n        | ``x`` & ``y`` | identifies the end-point which is relative to the start-point. |\n        | ``steps`` | defines how many intermediate mouse move events are sent. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |\n\n        See the `Finding elements` section for details about the selectors.\n\n        First it moves the mouse to the start-point (center of boundingbox),\n        then presses the left mouse button,\n        then moves to the relative position with the given intermediate steps,\n        then releases the mouse button.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example\n        | `Drag And Drop Relative to`    \"Circle\"    -20    0     # Slides the element 20 pixel to the left\n\n        [https://forum.robotframework.org/t//4249|Comment >>]\n        "
    },
    "fill_secret": {
        "name": "fill_secret",
        "doc": "Fills the given secret from ``variable_name`` into the\n        text field found by ``selector``.\n\n\n        | =Arguments= | =Description= |\n        | ``secret`` | The secret string that should be filled into the text field. |\n        | ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |\n        | ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |\n\n\n        This keyword does not log secret in Robot Framework logs, when\n        keyword resolves the ``secret`` variable internally.\n        When ``secret`` variable is prefixed with `$`, without the curly braces,\n        library will resolve the corresponding Robot Framework variable.\n\n        If ``secret`` variable is prefixed with `%`, library will resolve\n        corresponding environment variable. Example `$Password`` will\n        resolve to ``${Password}`` Robot Framework variable.\n        Also ``%ENV_PWD`` will resolve to ``%{ENV_PWD}`` environment variable.\n\n        *Using normal Robot Framework variables like ``${password}`` will not work!*\n\n        *Normal plain text will not work.*\n        If you want to use plain text, use `Fill Text` keyword instead.\n\n        This keyword will also work with a give cryptographic cipher text, that has been\n        encrypted by Crypto library.\n        See [https://github.com/Snooz82/robotframework-crypto | Crypto Library] for more details.\n\n        If ``enable_playwright_debug`` is enabled in the library import,\n        secret will be always visible as plain text in the playwright debug\n        logs, regardless of the Robot Framework log level.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        See `Fill Text` for other details.\n\n        Example:\n        | `Fill Secret`    input#username_field    $username    # Keyword resolves variable value from Robot Framework variables\n        | `Fill Secret`    input#username_field    %username    # Keyword resolves variable value from environment variables\n\n        [https://forum.robotframework.org/t//4253|Comment >>]\n        "
    },
    "fill_text": {
        "name": "fill_text",
        "doc": "Clears and fills the given ``txt`` into the text field found by ``selector``.\n\n        This method waits for an element matching the ``selector`` to appear,\n        waits for actionability checks, focuses the element, fills it and\n        triggers an input event after filling.\n\n        If the element matching selector is not an <input>, <textarea> or\n        [contenteditable] element, this method throws an error. Note that\n        you can pass an empty string as ``txt`` to clear the input field.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |\n        | ``txt`` | Text for the text field. |\n        | ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        See `Type Text` for emulating typing text character by character.\n\n        Example:\n        | `Fill Text`    css=input#username_field    username\n\n        [https://forum.robotframework.org/t//4254|Comment >>]\n        "
    },
    "focus": {
        "name": "focus",
        "doc": "Moves focus on to the element found by ``selector``.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the element. See the `Finding elements` section for details about the selectors. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        If there's no element matching selector, the method waits until a\n        matching element appears in the DOM. Timeouts after 10 seconds.\n\n        [https://forum.robotframework.org/t//4255|Comment >>]\n        "
    },
    "handle_future_dialogs": {
        "name": "handle_future_dialogs",
        "doc": "Handle next dialog on page with ``action``.\n\n        Dialog can be any of alert, beforeunload, confirm or prompt. Handling dialogue\n        must be called before the action, like example click, that triggers the\n        dialogue.\n\n        If a handler is not set dialogs are dismissed by default.\n\n        | =Arguments= | =Description= |\n        | ``action`` | How to handle the alert. Can be ``accept`` or ``dismiss``. |\n        | ``prompt_input`` | The value to enter into prompt. Only valid if ``action`` argument equals ``accept``. Defaults to empty string. |\n\n        Example:\n        | `Handle Future Dialogs`    action=accept\n        | `Click`                    \\#alerts\n\n        [https://forum.robotframework.org/t//4293|Comment >>]\n        "
    },
    "hover": {
        "name": "hover",
        "doc": "Moves the virtual mouse and scrolls to the element found by ``selector``.\n\n        This method hovers over an element matching ``selector`` by performing the following steps:\n        - Find an element match matching ``selector``. If there is none,\n          wait until a matching element is attached to the DOM.\n        - Wait for actionability checks on the matched element, unless ``force`` option is set.\n          If the element is detached during the checks, the whole action is retried.\n        - Scroll the element into view if needed.\n        - Use `Mouse Move` to hover over the center of the element, or the specified ``position``.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector element to hover. See the `Finding elements` section for details about the selectors. |\n        | ``position_x`` & ``position_y`` | A point to hover relative to the top-left corner of element bounding box. If not specified, hovers over some visible point of the element. Only positive values within the bounding-box are allowed. |\n        | ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |\n        | ``*modifiers`` | Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example:\n        | `Hover`    h1\n        | `Hover`    h1    10   20    Alt\n\n        [https://forum.robotframework.org/t//4295|Comment >>]\n        "
    },
    "keyboard_input": {
        "name": "keyboard_input",
        "doc": "Input text into page with virtual keyboard.\n\n        | =Arguments= | =Description= |\n        | ``action`` | ``insertText``: Dispatches only input event, does not emit the keydown, keyup or keypress events. ``type``: Sends a keydown, keypress/input, and keyup event for each character in the text. |\n        | ``input`` | The inputstring to be typed. _No special keys possible._ |\n        | ``delay`` | Time to wait between key presses in Robot Framework's time format. Defaults to 0. |\n\n        *Attention:*\n        Argument type `int` for 'delay' in milliseconds has been changed to `timedelta` in Browser 14.0.0. Use Robot Framework time format with units instead.\n\n\n        Note: To press a special key, like Control or ArrowDown, use keyboard.press.\n        Modifier keys DO NOT effect these methods. For testing modifier effects use single key\n        presses with ``Keyboard Key  press``\n\n        Example:\n        | `Keyboard Input`    insertText    0123456789\n\n        [https://forum.robotframework.org/t//4297|Comment >>]\n        "
    },
    "keyboard_key": {
        "name": "keyboard_key",
        "doc": "Press a keyboard key on the virtual keyboard or set a key up or down.\n\n        | =Arguments= | =Description= |\n        | ``action`` | Determine whether the key should be released (``up``), hold (``down``) or pressed once (``press``). ``down`` or ``up`` are useful for combinations i.e. with Shift. |\n        | ``key`` | The key to be pressed. An example of valid keys are: ``F1`` - ``F12``, ``Digit0`` - ``Digit9``, ``KeyA`` - ``KeyZ``, ``Backquote``, ``Minus``, ``Equal``, ``Backslash``, ``Backspace``, ``Tab``, ``Delete``, ``Escape``, ``ArrowDown``, ``End``, ``Enter``, ``Home``, ``Insert``, ``PageDown``, ``PageUp``, ``ArrowRight``, ``ArrowUp`` , etc. |\n\n\n        Useful keys for ``down`` and ``up`` for example are:\n        ``Shift``, ``Control``, ``Alt``, ``Meta``, ``ShiftLeft``\n\n        Example excecution:\n        | `Keyboard Key`    press    S\n        | `Keyboard Key`    down     Shift\n        | `Keyboard Key`    press    ArrowLeft\n        | `Keyboard Key`    press    Delete\n        | `Keyboard Key`    up       Shift\n\n        Note: Capital letters don't need to be written by the help of Shift. You can type them in directly.\n\n        [https://forum.robotframework.org/t//4298|Comment >>]\n        "
    },
    "mouse_button": {
        "name": "mouse_button",
        "doc": "Clicks, presses or releases a mouse button.\n\n        | =Arguments= | =Description= |\n        | ``action`` | Defines if it is a mouseclick (``click``), holding down a button (``down``) or releasing it (``up``). |\n        | ``x``, ``y`` | Coordinates to move before action is executed. |\n        | ``button`` | One of ``left``, ``middle`` or ``up``. Defaults to ``left``. |\n        | ``clickCount`` | Determine how often the button shall be clicked if action is equal to ``click``. Defaults to 1. |\n        | ``delay`` | Delay in Robot Framework time format between the mousedown and mouseup event. Can only be set if the action is ``click``. |\n\n        *Attention:*\n        Argument type `int` for 'delay' in milliseconds has been changed to `timedelta` in Browser 14.0.0. Use Robot Framework time format instead.\n        For refactoring just add 'ms' after the delay number.\n\n        Delay Example:\n        | `Mouse Button`    click    100 ms\n        | `Mouse Button`    click    ${dyn_delay} ms\n\n        Moving the mouse between holding down and releasing it, is possible with `Mouse Move`.\n\n        Example:\n        | `Hover`                     \"Obstacle\"           # Move mouse over the element\n        | `Mouse Button`              down                 # Press mouse button down\n        | `Mouse Move Relative To`    \"Obstacle\"    500    # Drag mouse\n        | `Mouse Button`              up                   # Release mouse button\n\n        [https://forum.robotframework.org/t//4303|Comment >>]\n        "
    },
    "mouse_move": {
        "name": "mouse_move",
        "doc": "Instead of selectors command mouse with coordinates.\n        The Click commands will leave the virtual mouse on the specified coordinates.\n\n        | =Arguments= | =Description= |\n        | ``x`` & ``y`` | Are absolute coordinates starting at the top left of the page. |\n        | ``steps`` | Number of intermediate steps for the mouse event. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |\n\n        Example:\n        | `Mouse Move`    400    400\n\n        [https://forum.robotframework.org/t//4304|Comment >>]\n        "
    },
    "mouse_move_relative_to": {
        "name": "mouse_move_relative_to",
        "doc": "Moves the mouse cursor relative to the selected element.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Identifies the element, which center is the start-point. |\n        | ``x`` & ``y`` | Are relative coordinates to the center of the elements bounding box. |\n        | ``steps`` | Number of intermediate steps for the mouse event. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example:\n        | `Mouse Move Relative To`    id=indicator    -100\n\n        [https://forum.robotframework.org/t//4305|Comment >>]\n        "
    },
    "mouse_wheel": {
        "name": "mouse_wheel",
        "doc": "Simulates the user rotation of a mouse wheel.\n\n        | =Arguments= | =Description= |\n        | ``deltaX`` & ``deltaY`` | Pixels that are scrolled horizontally & vertically. |\n\n        Example:\n        | # Before doing a mouse wheel interaction. A mouse needs to be posisioned on the browser window.\n        | `Hover`    body\n        | `Mouse Wheel`    0    250\n\n        [https://forum.robotframework.org/t//5186|Comment >>]\n        "
    },
    "press_keys": {
        "name": "press_keys",
        "doc": "Types the given key combination into element found by ``selector``.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |\n        | ``*keys`` | Keys to be press after each other. Using + to chain combine modifiers with a single keypress ``Control+Shift+T`` is supported. |\n\n\n        Supports values like \"a, b\" which will be automatically typed.\n\n        Also supports identifiers for keys like ``ArrowLeft`` or ``Backspace``.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        See playwright's documentation for a more comprehensive list of\n        supported input keys.\n        [https://playwright.dev/docs/api/class-page#page-press | Playwright docs for press.]\n\n        Example:\n        | # Keyword         Selector                    *Keys\n        | `Press Keys`      //*[@id=\"username_field\"]    h    e   l   o   ArrowLeft   l\n\n        [https://forum.robotframework.org/t//4311|Comment >>]\n        "
    },
    "record_selector": {
        "name": "record_selector",
        "doc": "Record the selector that is under mouse.\n\n\n        | =Arguments= | =Description= |\n        | ``label`` | text to show when on the box in the page while recording. |\n\n        Focus on the page and move mouse over the element you want to select.\n\n        Example:\n        | ${selector} =    `Record Selector`   Button\n        | `Click`  ${selector}\n        | ${selector2} =    `Record Selector`  Page header\n        | `Get Text`  ${selector2}  ==  Expected text\n\n        [https://forum.robotframework.org/t//4315|Comment >>]\n        "
    },
    "scroll_by": {
        "name": "scroll_by",
        "doc": "Scrolls an element or the page relative from current position by the given values.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the element. If the selector is ``${None}`` or ``${Empty}`` the page itself is scrolled. To ensure an element is in view use `Hover` instead. See the `Finding elements` section for details about the selectors. |\n        | ``vertical`` | defines how far and in which direction to scroll vertically. It can be a positive or negative number. Positive scrolls down, like ``50``, negative scrolls up, like ``-50``. It can be a percentage value of the absolute scrollable size, like ``9.95%`` or negative like ``-10%``. It can be the string ``height`` to defining to scroll exactly one visible height down or up with ``-height``. _Be aware that some pages do lazy loading and load more content once you scroll down._ The percentage of the current scrollable height is used and may change. |\n        | ``horizontal`` | defines where to scroll horizontally. Works same as vertical but defines positive values for right and negative values for left. ``width`` defines to scroll exactly one visible range to the right. |\n        | ``behavior`` | defines whether the scroll happens directly or it scrolls smoothly. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        [https://forum.robotframework.org/t//4319|Comment >>]\n        "
    },
    "scroll_to": {
        "name": "scroll_to",
        "doc": "Scrolls an element or the page to an absolute position based on given coordinates.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the element. If the selector is ``${None}`` or ``${Empty}`` the page itself is scrolled. To ensure an element is in view use `Hover` instead. See the `Finding elements` section for details about the selectors. |\n        | ``vertical`` | defines where to scroll vertically. It can be a positive number, like ``300``. It can be a percentage value of the absolute scrollable size, like ``50%``. It can be a string defining that top or the bottom of the scroll area. < ``top`` | ``bottom`` > _Be aware that some pages do lazy loading and load more content once you scroll down._ Bottom defines the current known bottom coordinate. |\n        | ``horizontal`` | defines where to scroll horizontally. Works same as vertical but defines < ``left`` | ``right`` > as start and end. |\n        | ``behavior`` | defines whether the scroll happens directly or it scrolls smoothly. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        [https://forum.robotframework.org/t//4320|Comment >>]\n        "
    },
    "scroll_to_element": {
        "name": "scroll_to_element",
        "doc": "This method waits for actionability checks, then tries to scroll element into view,\n        unless it is completely visible.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the checkbox. See the `Finding elements` section for details about the selectors. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Does nothing if the element is already visible.\n\n        [https://forum.robotframework.org/t//4321|Comment >>]\n        "
    },
    "select_options_by": {
        "name": "select_options_by",
        "doc": "Selects options from select element found by ``selector``.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the ``<select>`` tag. See the `Finding elements` section for details about the selectors. |\n        | ``attribute`` | Attribute to select options by. Can be ``value``, ``label``, ``text`` or ``index``. Where ``label`` and ``text`` are same. |\n        | ``*values`` | Values to select. |\n\n\n        Returns list of options which keyword was able to select. The type of\n        list item matches to ``attribute`` definition. Example if ``attribute``\n        equals to `label` returned list contains label values. Or in case of\n        `index` it contains list of selected indexes.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        If no values to select are passed will deselect options in element.\n\n        Example:\n        | ${selected} =    `Select Options By`    select[name=preferred_channel]    label    Direct mail\n        | List Should Contain Value    ${selected}    Direct mail\n        | ${selected} =    `Select Options By`    select[name=interests]    value    males    females    others\n        | List Should Contain Value    ${selected}    males\n        | List Should Contain Value    ${selected}    females\n        | List Should Contain Value    ${selected}    others\n        | Length Should Be    ${selected}    3\n        | ${selected} =    `Select Options By`    select[name=possible_channels]    index    0    2\n        | List Should Contain Value    ${selected}    0\n        | List Should Contain Value    ${selected}    2\n        | ${selected} =    `Select Options By`    select[name=interests]    text     Males    Females\n        | List Should Contain Value    ${selected}    Males\n        | List Should Contain Value    ${selected}    Females\n\n        [https://forum.robotframework.org/t//4322|Comment >>]\n        "
    },
    "tap": {
        "name": "tap",
        "doc": "Simulates tap on the element found by ``selector``.\n\n        Requires that the ``hasTouch`` option of the `New Context` be set to true.\n        This method taps the element by performing the following steps:\n        - Wait for actionability checks on the element, unless force option is set.\n        - Scroll the element into view if needed.\n        - Use page.touchscreen to tap the center of the element, or the specified position.\n        - Wait for initiated navigations to either succeed or fail, unless noWaitAfter option is set.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector element to click. See the `Finding elements` section for details about the selectors. |\n        | ``*modifiers`` | Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. Modifiers can be specified in any order, and multiple modifiers can be specified. Valid modifier keys are ``Control``, ``Alt``, ``Shift`` and ``Meta``. |\n        | ``force`` | Whether to bypass the actionability checks. Defaults to false. |\n        | ``noWaitAfter`` | Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to ``False``. |\n        | ``position_x`` ``position_y`` | A point to click relative to the top-left corner of element bounding-box. Only positive values within the bounding-box are allowed. If not specified, clicks to some visible point of the element. |\n        | ``trial`` | When set, this method only performs the actionability checks and skips the action. Defaults to ``False``.  |\n\n        Example:\n        | New Context    hasTouch=${False}\n        | New Page    ${URL}\n        | Tap    css=input#login_button\n\n        [https://forum.robotframework.org/t//5939|Comment >>]\n        "
    },
    "type_secret": {
        "name": "type_secret",
        "doc": "Types the given secret from ``variable_name`` into the text field\n        found by ``selector``.\n\n        This keyword does not log secret in Robot Framework logs, if keyword resolves\n        the variable value internally. If ``enable_playwright_debug`` is enabled in\n        the library import, secret will be always visible as plain text in the playwright\n        debug logs, regardless of the Robot Framework log level.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |\n        | ``secret`` | Environment variable name with % prefix or a local variable with $ prefix that has the secret text value. Variable names can be used with and without curly braces. |\n        | ``delay`` | Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to ``0 ms``. Example: ``50 ms`` |\n        | ``clear`` | Set to false, if the field shall not be cleared before typing. Defaults to true. |\n\n        This keyword does not log secret in Robot Framework logs, when\n        keyword resolves the ``secret`` variable internally.\n        When ``secret`` variable is prefixed with `$`, without the curly braces,\n        library will resolve the corresponding Robot Framework variable.\n\n        If ``secret`` variable is prefixed with `%`, library will resolve\n        corresponding environment variable. Example `$Password`` will\n        resolve to ``${Password}`` Robot Framework variable.\n        Also ``%ENV_PWD`` will resolve to ``%{ENV_PWD}`` environment variable.\n\n        *Using normal Robot Framework variables like ``${password}`` will not work!*\n\n        *Normal plain text will not work.*\n        If you want to use plain text, use `Type Text` keyword instead.\n\n        This keyword will also work with a give cryptographic cipher text, that has been\n        encrypted by Crypto library.\n        See [https://github.com/Snooz82/robotframework-crypto | Crypto Library] for more details.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        See `Type Text` for details.\n\n        Example\n        | `Type Secret`    input#username_field    $username      # Keyword resolves ${username} variable value from Robot Framework variables\n        | `Type Secret`    input#username_field    %username      # Keyword resolves $USERNAME/%USERNAME% variable value from environment variables\n        | `Type Secret`    input#username_field    ${username}    # Robot Framework resolves the variable value, but secrect can leak to Robot framework output files.\n\n        [https://forum.robotframework.org/t//4338|Comment >>]\n        "
    },
    "type_text": {
        "name": "type_text",
        "doc": "Types the given ``txt`` into the text field found by ``selector``.\n\n        Sends a ``keydown``, ``keypress/input``, and ``keyup`` event for each\n        character in the text.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |\n        | ``txt`` | Text for the text field. |\n        | ``delay`` | Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to ``0 ms``. Example: ``50 ms`` |\n        | ``clear`` | Set to false, if the field shall not be cleared before typing. Defaults to true. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        See `Fill Text` for direct filling of the full text at once.\n\n        Example\n        | `Type Text`    input#username_field    user\n        | `Type Text`    input#username_field    user    delay=10 ms    clear=No\n\n        [https://forum.robotframework.org/t//4339|Comment >>]\n        "
    },
    "uncheck_checkbox": {
        "name": "uncheck_checkbox",
        "doc": "Unchecks the checkbox found by ``selector``.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the checkbox. See the `Finding elements` section for details about the selectors. |\n        | ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Does nothing if the element is not checked/selected.\n\n        [https://forum.robotframework.org/t//4340|Comment >>]\n        "
    },
    "upload_file_by_selector": {
        "name": "upload_file_by_selector",
        "doc": "Uploads file from `path` to file input element matched by selector.\n\n        Fails if upload is not done before library timeout.\n        Therefor it may be necessary to increase the timeout with `Set Browser Timeout`.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Identifies the file input element. |\n        | ``path`` | Path to the file to be uploaded. |\n\n        Example:\n        | `Upload File By Selector`    //input[@type='file']    big_file.zip\n\n        [https://forum.robotframework.org/t//4341|Comment >>]\n        "
    },
    "wait_for_alert": {
        "name": "wait_for_alert",
        "doc": "Returns a promise to wait for next dialog on page, handles it with ``action`` and optionally verifies the dialogs text.\n\n        Dialog/alert can be any of alert, beforeunload, confirm or prompt.\n\n        | =Arguments= | =Description= |\n        | ``action`` | How to handle the alert. Can be ``accept`` or ``dismiss``. |\n        | ``prompt_input`` | The value to enter into prompt. Only valid if ``action`` argument equals ``accept``. Defaults to empty string. |\n        | ``text`` | Optional text to verify the dialogs text. |\n        | ``timeout`` | Optional timeout in Robot Framework time format. |\n\n\n        The main difference between this keyword and `Handle Future Dialogs`\n        is that `Handle Future Dialogs` keyword is automatically set as promise.\n        But this keyword must be called as argument to `Promise To` keyword. Also this\n        keyword can optionally verify the dialogue text and return it. If ``text`` is\n        argument ``None`` or is not set, dialogue text is not verified.\n\n        Example with returning text:\n\n        | ${promise} =         `Promise To`    `Wait For Alert`    action=accept\n        | `Click`              id=alerts\n        | ${text} =            `Wait For`      ${promise}\n        | Should Be Equal      ${text}         Am an alert\n\n        Example with text verify:\n\n        | ${promise} =       Promise To    Wait For Alert    action=accept    text=Am an alert\n        | Click              id=alerts\n        | ${text} =          Wait For      ${promise}\n\n        [https://forum.robotframework.org/t//4343|Comment >>]\n        "
    },
    "get_attribute": {
        "name": "get_attribute",
        "doc": "Returns the HTML ``attribute`` of the element found by ``selector``.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``attribute`` | Requested attribute name. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the attribute value matches the expected value. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        When a attribute is selected that is not present and no assertion operator is set,\n        the keyword fails. If an assertion operator is set and the attribute is not present,\n        the returned value is ``None``. This can be used to assert check the presents or\n        the absents of an attribute.\n\n        Example Element:\n        | <button class=\"login button active\" id=\"enabled_button\" something>Login</button>\n\n        Example Code:\n        | `Get Attribute`   id=enabled_button    disabled                   # FAIL => \"Attribute 'disabled' not found!\"\n        | `Get Attribute`   id=enabled_button    disabled     ==    ${None}     # PASS => returns: None\n        | `Get Attribute`   id=enabled_button    something    evaluate    value is not None    # PASS =>  returns: True\n        | `Get Attribute`   id=enabled_button    disabled     evaluate    value is None        # PASS =>  returns: True\n\n        [https://forum.robotframework.org/t//4256|Comment >>]\n        "
    },
    "get_attribute_names": {
        "name": "get_attribute_names",
        "doc": "Returns all HTML attribute names of an element as a list.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``*assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that attribute names do match to the expected value. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        Available assertions:\n        - ``==`` , ``!=`` and ``contains`` / ``*=`` can work with multiple values\n        - ``validate`` and ``evaluate`` only accepts one single expected value\n\n        Other operators are not allowed.\n\n        Example:\n        | `Get Attribute Names`    [name=\"readonly_input\"]    ==    type    name    value    readonly    # Has exactly these attribute names.\n        | `Get Attribute Names`    [name=\"readonly_input\"]    contains    disabled    # Contains at least this attribute name.\n\n        [https://forum.robotframework.org/t//4257|Comment >>]\n        "
    },
    "get_boundingbox": {
        "name": "get_boundingbox",
        "doc": "Gets elements size and location as an object ``{x: float, y: float, width: float, height: float}``.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which shall be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the BoundingBox as Dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does *not* need a ``validate`` combined with a cast of ``value``. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the value matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        Example use:\n        | ${bounding_box}=    `Get BoundingBox`    id=element                 # unfiltered\n        | Log                 ${bounding_box}                                 # {'x': 559.09375, 'y': 75.5, 'width': 188.796875, 'height': 18}\n        | ${x}=               `Get BoundingBox`    id=element    x            # filtered\n        | Log                 X: ${x}                                         # X: 559.09375\n        | # Assertions:\n        | `Get BoundingBox`     id=element         width         >    180\n        | `Get BoundingBox`     id=element         ALL           validate    value['x'] > value['y']*2\n\n        [https://forum.robotframework.org/t//4258|Comment >>]\n        "
    },
    "get_checkbox_state": {
        "name": "get_checkbox_state",
        "doc": "Returns the state of the checkbox found by ``selector``.\n\n\n        Optionally asserts that the state matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector which shall be examined. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | ``==`` and ``!=`` and equivalent are allowed on boolean values. Other operators are not accepted. |\n        | ``assertion_expected`` | Boolean value of expected state. Strings are interpreted as booleans. All strings are ``${True}`` except of the following `FALSE, NO, OFF, 0, UNCHECKED, NONE, ${EMPTY}`` (case-insensitive). Defaults to unchecked. |\n        | ``message`` | overrides the default error message for assertion. |\n\n        - ``checked`` => ``True``\n        - ``unchecked`` => ``False``\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example:\n        | `Get Checkbox State`    [name=can_send_email]    ==    checked\n\n        [https://forum.robotframework.org/t//4261|Comment >>]\n        "
    },
    "get_classes": {
        "name": "get_classes",
        "doc": "Returns all classes of an element as a list.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``*assertion_expected`` | Expected values for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the value matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        Available assertions:\n        - ``==`` , ``!=`` and ``contains`` / ``*=`` can work with multiple values\n        - ``validate`` and ``evaluate`` only accepts one single expected value\n\n        Other operators are not allowed.\n\n        Example:\n        | `Get Classes`    id=draggable    ==    react-draggable    box    # Element contains exactly this class name.\n        | `Get Classes`    id=draggable    validate    \"react-draggable-dragged\" not in value    # Element does not contain react-draggable-dragged class.\n\n        [https://forum.robotframework.org/t//4262|Comment >>]\n        "
    },
    "get_client_size": {
        "name": "get_client_size",
        "doc": "Gets elements or pages client size (``clientHeight``, ``clientWidth``) as object {width: float, height: float}.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (``document.scrollingElement``). See the `Finding elements` section for details about the selectors. |\n        | ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the value matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        See `Get BoundingBox` or `Get Scroll Size` for examples.\n\n        [https://forum.robotframework.org/t//4263|Comment >>]\n        "
    },
    "get_download_state": {
        "name": "get_download_state",
        "doc": "Gets the state of a download.\n\n        Returns a dictionary of type `DownloadInfo` with the following keys:\n        | {\n        |   saveAs: str\n        |   suggestedFilename: str\n        |   state: str\n        |   downloadID: Optional[str]\n        | }\n\n        | =Arguments= | =Description= |\n        | ``download`` | `DownloadInfo` dictionary returned from `Promise To Wait For Download` or download id as string. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected state of the download. Be aware that the returned value is a dictionary |\n        | ``message`` | overrides the default error message for assertion. |\n\n        [https://forum.robotframework.org/t//6479|Comment >>]\n        "
    },
    "get_element": {
        "name": "get_element",
        "doc": "Returns a reference to a Playwright [https://playwright.dev/docs/api/class-locator|Locator].\n\n        The reference can be used in subsequent selectors.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which shall be retrieved . See the `Finding elements` section for details about the selectors. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example:\n        | ${element} =    `Get Element`    \\#username_field\n        | ${option_value} =    `Get Property`    ${element} >> optionOne    value    # Locator is resolved from the page.\n        | ${option_value} =    `Get Property`    ${element} >> optionTwo    value    # Locator is resolved again from the page.\n\n        [https://forum.robotframework.org/t//4269|Comment >>]\n        "
    },
    "get_element_by": {
        "name": "get_element_by",
        "doc": "Allows locating elements by their features.\n\n        Selection strategies can be several Playwright strategies like AltText or Label.\n        See [https://playwright.dev/docs/locators|Playwright Locators] for more information.\n\n        | =Arguments= | =Description= |\n        | ``locator_type`` | SelectionStrategy to be used. Refers to Playwrights ``page.getBy***`` functions. See https://playwright.dev/docs/locators |\n        | ``text`` | Text to locate the element for. |\n        | ``exact`` | Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace. This has no effect if RegExp is used or if TestID is used as strategy. |\n        | ``all_elements`` | If True, returns all matched elements as a list. |\n\n        This keywords implements the following Playwright functions:\n        - [https://playwright.dev/docs/api/class-page#page-get-by-alt-text|page.getByAltText]\n        - [https://playwright.dev/docs/api/class-page#page-get-by-label|page.getByLabel]\n        - [https://playwright.dev/docs/api/class-page#page-get-by-placeholder|page.getByPlaceholder]\n        - [https://playwright.dev/docs/api/class-page#page-get-by-test-id|page.getByTestId]\n        - [https://playwright.dev/docs/api/class-page#page-get-by-text|page.getByText]\n        - [https://playwright.dev/docs/api/class-page#page-get-by-title|page.getByTitle]\n\n        ``page.getByRole`` is supported by `Get Element By Role` keyword.\n\n        If an element shall be fetched from an iframe, a selector prefix must be set using `Set Selector Prefix` keyword including ``>>>`` as ending.\n\n        [https://forum.robotframework.org/t//5937|Comment >>]\n        "
    },
    "get_element_by_role": {
        "name": "get_element_by_role",
        "doc": "Returns a reference to Playwright [https://playwright.dev/docs/api/class-locator|Locator]\n        for the matched element by ``role`` or a list of references if ``all_elements`` is set to ``True``.\n\n        Allows locating elements by their [https://www.w3.org/TR/wai-aria-1.2/#roles|ARIA role],\n        [https://www.w3.org/TR/wai-aria-1.2/#aria-attributes|ARIA attributes] and\n        [https://w3c.github.io/accname/#dfn-accessible-name|accessible name].\n\n\n        Consider the following DOM structure.\n\n        | <h3>Sign up</h3>\n        | <label>\n        |   <input type=\"checkbox\" /> Subscribe\n        | </label>\n        | <br/>\n        | <button>Submit</button>\n\n        You can locate each element by it's implicit role:\n        | ${heading}    Get Element By Role    heading    name=Sign up\n        | ${checkbox}   Get Element By Role    checkbox    name=Subscribe\n        | ${button}     Get Element By Role    button    name=/submit/i\n\n        | =Arguments= | =Description= |\n        | ``all_elements`` | If True, returns all matched elements as a list. |\n        | ``role`` | Role from which shall be retrieved. |\n        | ``checked`` | An attribute that is usually set by aria-checked or native <input type=checkbox> controls. |\n        | ``disabled`` | An attribute that is usually set by aria-disabled or disabled. |\n        | ``exact`` | Whether name is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when name is a regular expression. Note that exact match still trims whitespace. |\n        | ``expanded`` | An attribute that is usually set by aria-expanded. |\n        | ``include_hidden`` | Option that controls whether hidden elements are matched. By default, only non-hidden elements, as defined by ARIA, are matched by role selector. |\n        | ``level`` | A number attribute that is usually present for roles heading, list item, row, treeitem, with default values for <h1>-<h6> elements. |\n        | ``name`` | Option to match the accessible name. By default, matching is case-insensitive and searches for a substring, use exact to control this behavior. |\n        | ``pressed`` | An attribute that is usually set by aria-pressed. |\n        | ``selected`` | An attribute that is usually set by aria-selected. |\n\n        If an element shall be fetched from an iframe, a selector prefix must be set using `Set Selector Prefix` keyword including ``>>>`` as ending.\n\n        [https://forum.robotframework.org/t//5938|Comment >>]\n        "
    },
    "get_element_count": {
        "name": "get_element_count",
        "doc": "Returns the count of elements found with ``selector``.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector which shall be counted. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Optionally asserts that the state matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        Example:\n        | `Get Element Count`    label    >    1\n\n        [https://forum.robotframework.org/t//4270|Comment >>]\n        "
    },
    "get_element_states": {
        "name": "get_element_states",
        "doc": "Get the active states from the element found by ``selector``.\n\n        This Keyword returns a list of states that are valid for the selected element.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the corresponding object. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``*assertion_expected`` | Expected states |\n        | ``message`` | overrides the default error message for assertion. |\n        | ``return_names`` | If set to ``False`` the keyword does return an IntFlag object (`ElementState`) instead of a list. `ElementState` may contain multiple states at the same time. Defaults to ``True``. |\n\n        Optionally asserts that the state matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default, assertion\n        is not done.\n\n        This keyword internally works with Python IntFlag.\n        Flags can be processed using bitwise operators like & (bitwise AND) and | (bitwise OR).\n        When using the assertion operators ``then``, ``evaluate`` or ``validate`` the ``value``\n        contain the states as `ElementState`.\n\n        Example:\n        | `Get Element States`    h1    validate    value & visible   # Fails in case of an invisible element\n        | `Get Element States`    h1    then    value & (visible | hidden)  # Returns either ``['visible']`` or ``['hidden']``\n        | `Get Element States`    h1    then    bool(value & visible)  # Returns ``${True}`` if element is visible\n\n        The most typical use case would be to verify if an element contains a specific state or multiple states.\n\n        Example:\n        | `Get Element States`    id=checked_elem      *=    checked\n        | `Get Element States`    id=checked_elem      not contains    checked\n        | `Get Element States`    id=invisible_elem    contains    hidden    attached\n        | `Get Element States`    id=disabled_elem     contains    visible    disabled    readonly\n\n        Elements do return the positive and negative values if applicable.\n        As example, a checkbox does return either ``checked`` or ``unchecked`` while a text input\n        element has none of those two states.\n        Select elements have also either ``selected`` or ``unselected``.\n\n        The state of ``animating`` will be set if an element is not considered ``stable``\n        within 300 ms.\n\n        If an element is not attached to the dom, so it can not be found within 250ms\n        it is marked as ``detached`` as the only state.\n\n        ``stable`` state is not returned, because it would cause too high delay in that keyword.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        [https://forum.robotframework.org/t//4272|Comment >>]\n        "
    },
    "get_elements": {
        "name": "get_elements",
        "doc": "Returns a reference to Playwright [https://playwright.dev/docs/api/class-locator|Locator]\n        for all matched elements by ``selector``.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which shall be retrieved. See the `Finding elements` section for details about the selectors. |\n\n        Example:\n        | ${elements} =    `Get Elements`\n        | ${elem} =    Get From List    ${elements}    0\n        | ${option_value} =    `Get Property`    ${elem} >> option    value\n\n        [https://forum.robotframework.org/t//4273|Comment >>]\n        "
    },
    "get_page_source": {
        "name": "get_page_source",
        "doc": "Gets pages HTML source as a string.\n\n        | =Arguments= | =Description= |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Optionally does a string assertion. See `Assertions` for further details for\n        the assertion arguments. By default assertion is not done.\n\n        [https://forum.robotframework.org/t//4275|Comment >>]\n        "
    },
    "get_property": {
        "name": "get_property",
        "doc": "Returns the ``property`` of the element found by ``selector``.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``property`` | Requested property name. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the property value matches the expected value. See `Assertions`\n        for further details for the assertion arguments. By default assertion is not done.\n\n        If ``assertion_operator`` is set and property is not found, ``value`` is ``None``\n        and Keyword does not fail. See `Get Attribute` for examples.\n\n        Example:\n        | `Get Property`    h1    innerText    ==    Login Page\n        | ${property} =    `Get Property`    h1    innerText\n\n        [https://forum.robotframework.org/t//4276|Comment >>]\n        "
    },
    "get_scroll_position": {
        "name": "get_scroll_position",
        "doc": "Gets elements or pages current scroll position as object ``{top: float, left: float, bottom: float, right: float}``.\n\n        It describes the rectangle which is visible of the scrollable content of that element.\n        all values are measured from position {top: 0, left: 0}.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (``document.scrollingElement``). See the `Finding elements` section for details about the selectors. |\n        | ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the scroll position as dictionary, otherwise it will just return the single value selected by the key. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the value matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        See `Get BoundingBox` or `Get Scroll Size` for examples.\n\n        [https://forum.robotframework.org/t//4277|Comment >>]\n        "
    },
    "get_scroll_size": {
        "name": "get_scroll_size",
        "doc": "Gets elements or pages scrollable size as object ``{width: float, height: float}``.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Optional selector from which shall be retrieved. If no selector is given the scroll size of the page itself is used. See the `Finding elements` section for details about the selectors. |\n        | ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the state matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        See `Get BoundingBox` for more similar examples.\n\n        Example use:\n        | ${height}=         `Get Scroll Size`    height                          # filtered page by height\n        | Log                Width: ${height}                                   # Height: 58425\n        | ${scroll_size}=    `Get Scroll Size`    id=keyword-shortcuts-container  # unfiltered element\n        | Log                ${scroll_size}                                     # {'width': 253, 'height': 3036}\n\n        [https://forum.robotframework.org/t//4278|Comment >>]\n        "
    },
    "get_select_options": {
        "name": "get_select_options",
        "doc": "Returns attributes of options of a ``select`` element as a list of dictionaries.\n\n        Returned dictionaries have the following keys and their values\n        \"index\", \"value\", \"label\" and \"selected\".\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that these match the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        Example:\n\n        | `Get Select Options`     //select[2]    validate  [v[\"label\"] for v in value] == [\"Email\", \"Mobile\"]\n        | `Get Select Options`   select#names     validate  any(v[\"label\"] == \"Mikko\" for v in value)\n\n        [https://forum.robotframework.org/t//4279|Comment >>]\n        "
    },
    "get_selected_options": {
        "name": "get_selected_options",
        "doc": "Returns the specified attribute of selected options of the ``select`` element.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``option_attribute`` | Which attribute shall be returned/verified. Defaults to label. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``*assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that these match the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        - ``==`` , ``!=`` and ``contains`` / ``*=`` can work with multiple values\n        - ``validate`` and ``evaluate`` only accepts one single expected value\n\n        Other operators are not allowed.\n\n        Example:\n\n        | `Select Options By`      label                    //select[2]    Email      Mobile\n        | ${selected_list}         `Get Selected Options`   //select[2]                                         # getter\n        | `Get Selected Options`   //select[2]              label          `==`       Mobile             Mail   #assertion content\n        | `Select Options By`      label                    select#names   2          4\n        | `Get Selected Options`   select#names             index          `==`       2                  4      #assertion index\n        | `Get Selected Options`   select#names             label          *=         Mikko                     #assertion contain\n        | `Get Selected Options`   select#names             label          validate   len(value) == 3           #assertion length\n\n        [https://forum.robotframework.org/t//4280|Comment >>]\n        "
    },
    "get_style": {
        "name": "get_style",
        "doc": "Gets the computed style properties of the element selected by ``selector``.\n\n        Optionally matches with any sequence assertion operator.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector from which the style shall be retrieved. See the `Finding elements` section for details about the selectors. |\n        | ``key`` | Key of the requested CSS property. Retrieves \"ALL\" styles as dictionary by default. All css settings can be used as keys even if they are not all returned in the dictionary. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n        | ``pseudo_element`` | Pseudo element to match. Defaults to None. Pseudo elements are special css |\n\n        [ https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements | Pseudo element ] is a css fuctionality to add styles. Example `::before` or `::after`.\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Optionally asserts that the style matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        [https://forum.robotframework.org/t//4281|Comment >>]\n        "
    },
    "get_table_cell_element": {
        "name": "get_table_cell_element",
        "doc": "Returns the Web Element that has the same column index and same row index as the selected elements.\n\n        | =Arguments= | =Description= |\n        | ``table`` | selector must select the ``<table>`` element that contains both selected elements |\n        | ``column`` | selector can select any ``<th>`` or ``<td>`` element or one of their descendants. |\n        | ``row`` | selector can select any ``<tr>`` element or one of their descendant like ``<td>`` elements. |\n\n        ``column`` and ``row`` can also consume index numbers instead of selectors.\n        Indexes are starting from ``0`` and ``-1`` is specific for the last element.\n\n        Selectors for ``column`` and ``row`` are directly appended to ``table`` selector like this: ``f\"{table} >> {row}\" .``\n\n        | = GitHub = |   = Slack =      | = Real Name =   |\n        | mkorpela   | @mkorpela        | Mikko Korpela   |\n        | aaltat     | @aaltat          | Tatu Aalto      |\n        | xylix      | @Kerkko Pelttari | Kerkko Pelttari |\n        | Snooz82    | @Ren\u00e9            | Ren\u00e9 Rohner     |\n\n\n        Example:\n        | ${table}=    Set Variable    [id=\"Get Table Cell Element\"] >> div.kw-docs table >> nth=1\n        | ${e}=    `Get Table Cell Element`    ${table}    \"Real Name\"    \"aaltat\"   # Returns element with text ``Tatu Aalto``\n        | Get Text    ${e}    ==    Tatu Aalto\n        | ${e}=    `Get Table Cell Element`    ${table}    \"Slack\"    \"Mikko Korpela\"   # Returns element with text ``@mkorpela``\n        | Get Text    ${e}    ==    @mkorpela\n        | ${e}=    `Get Table Cell Element`    ${table}    \"mkorpela\"    \"Kerkko Pelttari\"   # column does not need to be in row 0\n        | Get Text    ${e}    ==    @mkorpela\n        | ${e}=    `Get Table Cell Element`    ${table}    2    -1   # Index is also directly possible\n        | Get Text    ${e}    ==    Ren\u00e9 Rohner\n\n        [https://forum.robotframework.org/t//4282|Comment >>]\n        "
    },
    "get_table_cell_index": {
        "name": "get_table_cell_index",
        "doc": "Returns the index (0 based) of a table cell within its row.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | can select any ``<th>`` or ``<td>`` element or one of their descendants. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Example:\n        | ${table}=    Set Variable    id=`Get Table Cell Element` >> div.kw-docs table   #Table of keyword `Get Table Cell Element`\n        | ${idx}=    `Get Table Cell Index`    ${table} >> \"Real Name\"\n        | Should Be Equal    ${idx}    ${2}\n        | `Get Table Cell Index`    ${table} >> \"@aaltat\"    ==    1\n\n        Optionally asserts that the index matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments.\n        By default assertion is not done.\n\n        [https://forum.robotframework.org/t//4283|Comment >>]\n        "
    },
    "get_table_row_index": {
        "name": "get_table_row_index",
        "doc": "Returns the index (0 based) of a table row.\n\n\n        | =Arguments= | =Description= |\n        | ``selector`` | can select any ``<th>`` or ``<td>`` element or one of their descendants. See the `Finding elements` section for details about the selectors. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Example:\n        | ${table}=    Set Variable    id=`Get Table Cell Element` >> div.kw-docs table   #Table of keyword `Get Table Cell Element`\n        | ${idx}=    `Get Table Row Index`    ${table} >> \"@Ren\u00e9\"\n        | Should Be Equal    ${idx}    ${4}\n        | `Get Table Row Index`    ${table} >> \"@aaltat\"    ==    2\n\n        Optionally asserts that the index matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments.\n        By default assertion is not done.\n\n        [https://forum.robotframework.org/t//4284|Comment >>]\n        "
    },
    "get_text": {
        "name": "get_text",
        "doc": "Returns text attribute of the element found by ``selector``.\n\n               Keyword can also return `input` or `textarea` value property text.\n        See the `Finding elements` section for details about the selectors.\n\n               | =Arguments= | =Description= |\n               | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n               | ``assertion_expected`` | Expected value for the state |\n               | ``message`` | overrides the default error message for assertion. |\n\n               Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n               Optionally asserts that the text matches the specified assertion. See `Assertions`\n               for further details for the assertion arguments. By default, assertion is not done.\n\n               Example:\n               | ${text} =    `Get Text`    id=important                            # Returns element text without assertion.\n               | ${text} =    `Get Text`    id=important    ==    Important text    # Returns element text with assertion.\n               | ${text} =    `Get Text`    //input         ==    root              # Returns input element text with assertion.\n\n               [https://forum.robotframework.org/t//4285|Comment >>]\n        "
    },
    "get_title": {
        "name": "get_title",
        "doc": "Returns the title of the current page.\n\n        | =Arguments= | =Description= |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Optionally asserts that title matches the specified assertion. See `Assertions`\n        for further details for the assertion arguments. By default assertion is not done.\n\n        [https://forum.robotframework.org/t//4286|Comment >>]\n        "
    },
    "get_url": {
        "name": "get_url",
        "doc": "Returns the current URL.\n\n        | =Arguments= | =Description= |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the state |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Optionally asserts that it matches the specified assertion. See `Assertions` for further details\n        for the assertion arguments. By default assertion is not done.\n\n        [https://forum.robotframework.org/t//4287|Comment >>]\n        "
    },
    "get_viewport_size": {
        "name": "get_viewport_size",
        "doc": "Returns the current viewport dimensions.\n\n        | =Arguments= | =Description= |\n        | ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the viewport size as dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does *not* need a ``validate`` combined with a cast of ``value``. |\n        | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |\n        | ``assertion_expected`` | Expected value for the counting |\n        | ``message`` | overrides the default error message for assertion. |\n\n        Optionally asserts that the state matches the specified assertion. See\n        `Assertions` for further details for the assertion arguments. By default assertion\n        is not done.\n\n        Example:\n        | `Get Viewport Size`    ALL    ==    {'width':1280, 'height':720}\n        | `Get Viewport Size`    width    >=    1200\n\n        [https://forum.robotframework.org/t//4288|Comment >>]\n        "
    },
    "http": {
        "name": "http",
        "doc": "Performs an HTTP request in the current browser context\n\n        | =Arguments= | =Description= |\n        | ``url`` | The request url, e.g. ``/api/foo``. |\n        | ``method`` | The HTTP method for the request. Defaults to GET. |\n        | ``body`` | The request body. GET requests cannot have a body. If the body can be parsed as JSON, the ``Content-Type`` header for the request will be automatically set to ``application/json``. Defaults to None. |\n        | ``headers`` | A dictionary of additional request headers. Defaults to None. |\n\n        The response is a Python dictionary with following attributes:\n          - ``status`` <int> The status code of the response.\n          - ``statusText`` <str> Status text corresponding to ``status``, e.g OK or INTERNAL SERVER ERROR. This may not be available for all browser.\n          - ``body`` <dict> | <str> The response body. If the body can be parsed as a JSON obejct,\n          it will be returned as Python dictionary, otherwise it is returned as a string.\n          - ``headers`` <dict> A dictionary containing all response headers.\n          - ``ok`` <bool> Whether the request was successfull, i.e. the ``status`` is range 200-299.\n\n        Here's an example of using Robot Framework dictionary variables and extended variable syntax to\n        do assertions on the response object:\n\n        | &{res}=             `HTTP`                       /api/endpoint\n        | Should Be Equal     ${res.status}              200\n        | Should Be Equal     ${res.body.some_field}     some value\n\n        [https://forum.robotframework.org/t//4296|Comment >>]\n        "
    },
    "wait_for_navigation": {
        "name": "wait_for_navigation",
        "doc": "Waits until page has navigated to given ``url``.\n\n\n        | =Arguments= | =Description= |\n        | ``url`` | Expected navigation target address either the exact match or a JavaScript-like regex wrapped in ``/`` symbols. |\n        | ``timeout`` | Timeout supports Robot Framework time format. Uses default timeout if not set. |\n        | ``wait_until`` | When to consider operation succeeded, defaults to load. Events can be either: ``domcontentloaded`` - consider operation to be finished when the DOMContentLoaded event is fired. ``load`` - consider operation to be finished when the load event is fired. ``networkidle`` - consider operation to be finished when there are no network connections for at least 500 ms. ``commit`` - consider operation to be finished when network response is received and the document started loading. |\n\n\n        Keyword works only when page is loaded and does not work if URL fragment changes. Example if\n        https://marketsquare.github.io/robotframework-browser/Browser.html changes to\n        https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Navigation\n        keyword will fail.\n\n        Example:\n        | `Go To`                  ${ROOT_URL}/redirector.html\n        | `Wait for navigation`    ${ROOT_URL}/posted.html    wait_until=${wait_until}\n\n        [https://forum.robotframework.org/t//4347|Comment >>]\n        "
    },
    "wait_for_request": {
        "name": "wait_for_request",
        "doc": "Waits for request matching matcher to be made.\n\n        | =Arguments= | =Description= |\n        | ``matcher`` | Request URL matcher. Can be a string (Glob-Pattern), JavaScript RegExp (encapsulated in / with following flags) or JavaScript arrow-function that receives the [https://playwright.dev/docs/api/class-request|Request] object and returns a boolean. By default (with empty string) matches first available request. For additional information, see the Playwright [https://playwright.dev/docs/api/class-page#page-wait-for-request|waitForRequest] documentation. |\n        | ``timeout`` | Timeout supports Robot Framework time format. Uses default timeout if not set. |\n\n        See `Wait For Response` for more details.\n\n        *CAUTION:* Before Browser library 17.0.0, the ``matcher`` argument was always either a regex or JS function.\n        But the regex did not needed to be in slashes.\n        The most simple way to migrate to the new syntax is to add slashes around the matcher.\n        So ``/api/get/json`` becomes ``//api/get/json/``.\n\n        [https://forum.robotframework.org/t//4348|Comment >>]\n        "
    },
    "wait_for_response": {
        "name": "wait_for_response",
        "doc": "Waits for response matching matcher and returns the response as robot dict.\n\n        The response, which is returned by this keyword, is a robot dictionary with following attributes:\n          - ``status`` <int> The status code of the response.\n          - ``statusText`` <str> Status text corresponding to ``status``, e.g OK or INTERNAL SERVER ERROR. This may not be available for all browser.\n          - ``body`` <dict | str> The response body. If the body can be parsed as a JSON object,\n          it will be returned as Python dictionary, otherwise it is returned as a string.\n          - ``headers`` <dict> A dictionary containing all response headers.\n          - ``ok`` <bool> Whether the request was successful, i.e. the ``status`` is range 200-299.\n          - ``request`` <dict> containing ``method`` <str>, ``headers`` <dict> and ``postData`` <dict> | <str>\n          - ``url`` <str> url of the request.\n\n        | =Arguments= | =Description= |\n        | ``matcher`` | Request URL matcher. Can be a string (Glob-Pattern), JavaScript RegExp (encapsulated in / with following flags) or JavaScript arrow-function that receives the Response object and returns a boolean. By default (with empty string) matches first available request. For additional information, see the Playwright [https://playwright.dev/docs/api/class-page#page-wait-for-response|page.waitForResponse] documentation. |\n        | ``timeout`` | Timeout supports Robot Framework time format. Uses default timeout if not set. |\n\n        *CAUTION:* Before Browser library 17.0.0, the ``matcher`` argument was always either a regex or JS function.\n        But the regex did not needed to be in slashes.\n        The most simple way to migrate to the new syntax is to add slashes around the matcher.\n        So ``/api/get/json`` becomes ``//api/get/json/``.\n\n        == Matcher Examples: ==\n\n        === Glob-Pattern: ===\n\n        Glob-Patterns are strings that can contain wildcards. The following wildcards are supported:\n\n        Possible wildcards/patterns are:\n        - ``*`` matches any number of characters, except ``/``\n        - ``**`` matches any number of characters, including ``/``\n        - ``?`` matches one character, except ``/``\n        - ``[abc]`` matches one character in the brackets (in this example ``a``, ``b`` or ``c``)\n        - ``[a-z]`` matches one character in the range (in this example ``a`` to ``z``)\n        - ``{foo,bar,baz}`` matches one of the strings in the braces (in this example ``foo``, ``bar`` or ``baz``)\n\n        Example:\n        | `Wait For Response`    **/api/get/text    # matches any request with url ending with /api/get/text. example: https://browser.fi/api/get/text\n\n        === RegExp: ===\n\n        Regular Expressions are JavaScript regular expressions encapsulated in ``/`` with optional following flags:\n        Be aware that backslashes need to be escaped in Robot Framework, e.g. ``\\\\w`` instead of ``\\w``.\n        See [https://regex101.com|regex101] for more information on Regular Expressions.\n\n        Example:\n        | `Wait For Response`    /http://\\\\w+:\\\\d+/api/get/text/i    # matches any request with url ending with /api/get/text and containing http:// followed by any word and port. example: http://localhost:8080/api/get/text\n\n        === JavaScript Arrow-Function: ===\n\n        JavaScript Arrow-Functions are anonymous JavaScript functions that receive the\n        [https://playwright.dev/docs/api/class-response|Response] object and return a boolean.\n\n        Example:\n        | `Wait For Response`    response => response.url() === 'http://localhost/api/post' && response.status() === 200    # matches any response with url http://localhost/api/post and status code 200\n\n        == Robot Examples: ==\n\n        Synchronous Example:\n        | `Click`                \\#delayed_request    # Creates response which should be waited before next actions\n        | `Wait For Response`    matcher=/http://\\\\w+:\\\\d+/api/get/text/i\n        | `Click`                \\#save\n\n        Asynchronous Example:\n        | ${promise} =    `Promise To`    `Wait For Response`    timeout=60s\n        | `Click`           \\#delayed_request    # Creates response which should be waited before pressing save.\n        | `Click`           \\#next\n        | `Wait For`        ${promise}            # Waits for the response\n        | `Click`           \\#save\n\n        JavaScript Function Example:\n        | `Click`               \\#delayed_request    # Creates response which should be waited before pressing save.\n        | `Wait For Response`   [https://playwright.dev/docs/api/class-response/|response] => response.url().endsWith('json') && response.request().method() === 'GET'\n\n        [https://forum.robotframework.org/t//4349|Comment >>]\n        "
    },
    "wait_until_network_is_idle": {
        "name": "wait_until_network_is_idle",
        "doc": "*DEPRECATED!!* Use `Wait For Load State` instead.\n\n        If you have:\n        | `Wait Until Network Is Idle`    timeout=3s\n        then chnnage it to:\n        | `Wait For Load State`    networkidle    timeout=3s\n\n        Waits until there has been at least one instance of 500 ms of no network traffic on the page after loading.\n\n        Doesn't wait for network traffic that wasn't initiated within 500ms of page load.\n\n        | =Arguments= | =Description= |\n        | ``timeout`` | Timeout supports Robot Framework time format. Uses browser timeout if not set. |\n\n        Example:\n        | `Go To`                         ${URL}\n        | `Wait Until Network Is Idle`    timeout=3s\n\n        [https://forum.robotframework.org/t//4350|Comment >>]\n        "
    },
    "register_keyword_to_run_on_failure": {
        "name": "register_keyword_to_run_on_failure",
        "doc": "Sets the keyword to execute, when a Browser keyword fails.\n\n        | =Arguments= | =Description= |\n        | ``keyword`` | The name of a keyword that will be executed if a Browser keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries. |\n        | ``*args`` | The arguments to the keyword if any. |\n        | ``scope`` | Scope defines the live time of this setting. Available values are ``Global``, ``Suite`` or ``Test`` / ``Task``. See `Scope Settings` for more details. |\n\n        The initial keyword to use is set when `importing` the library, and\n        the keyword that is used by default is `Take Screenshot`.\n        Taking a screenshot when something failed is a very useful\n        feature, but notice that it can slow down the execution.\n\n        It is possible to use string ``NONE`` or any other robot falsy name,\n        case-insensitively, as well as Python ``None`` to disable this\n        feature altogether.\n\n        This keyword returns an object which contains the the previously\n        registered failure keyword. The return value can be always used to\n        restore the original value later. The returned object contains\n        keyword name and the possible arguments used to for the keyword.\n\n        If `Take Screenshot` keyword, without arguments, is register as run on failure\n        keyword, then filename argument default value is not used as screenshot file\n        name. Instead, ${TEST NAME}_FAILURE_SCREENSHOT_{index} is used as file name.\n        If there is need to use the filename argument default value, use\n        robotframework-browser-screenshot-{index} as filename argument value.\n\n        Example:\n        | `Register Keyword To Run On Failure`    Take Screenshot    # Uses ${TEST NAME}_FAILURE_SCREENSHOT_{index} as filename\n        | `Register Keyword To Run On Failure`    Take Screenshot    robotframework-browser-screenshot-{index}    # Uses robotframework-browser-screenshot-{index} as filename\n        | ${previous kw}=    `Register Keyword To Run On Failure`    NONE    # Disables run on failure functionality.\n        | `Register Keyword To Run On Failure`    ${previous kw}\n        | `Register Keyword To Run On Failure`    Take Screenshot    fullPage=True\n        | `Register Keyword To Run On Failure`    Take Screenshot    failure-{index}    fullPage=True\n\n        [https://forum.robotframework.org/t//4316|Comment >>]\n        "
    },
    "set_strict_mode": {
        "name": "set_strict_mode",
        "doc": "Controls library strict mode.\n\n        | =Arguments= | =Description= |\n        | ``mode`` | When set to ``True``, keywords that are searching elements will use Playwright [https://playwright.dev/docs/api/class-page#page-query-selector|strict mode]. Keyword changes library strict mode value and keyword also return the previous strict mode value. |\n        | ``scope``   | Scope defines the live time of that setting. Available values are ``Global``, ``Suite`` or ``Test`` / ``Task``. See `Scope` for more details. |\n\n\n        Example:\n        | ${old_mode} =      Set Strict Mode    False\n        | Get Text           //input            # Does not fail if selector points to one or more elements\n        | Set Strict Mode    ${old_mode}\n\n        [https://forum.robotframework.org/t//4332|Comment >>]\n        "
    },
    "promise_to": {
        "name": "promise_to",
        "doc": "Wrap a Browser library keyword and make it a promise.\n\n        Promised keyword is executed and started on background.\n        Test execution continues without waiting for ``kw`` to finish.\n\n        Returns reference to the promised keyword.\n\n        ``kw`` Keyword that will work async on background.\n\n        | =Arguments= | =Description= |\n        | ``kw`` | Keyword that will work async on background. |\n        | ``*args`` | Keyword arguments as normally used. |\n\n        Example:\n        | ${promise}=     `Promise To`            Wait For Response     matcher=     timeout=3\n        | `Click`           \\#delayed_request\n        | ${body}=        `Wait For`              ${promise}\n\n        [https://forum.robotframework.org/t//4312|Comment >>]\n        "
    },
    "promise_to_upload_file": {
        "name": "promise_to_upload_file",
        "doc": "Returns a promise that resolves when file from ``path`` has been uploaded.\n\n        Fails if the upload has not happened during timeout.\n\n        Upload file from ``path`` into next file chooser dialog on page.\n\n        | =Arguments= | =Description= |\n        | ``path`` | Path to file to be uploaded. |\n\n        Example use:\n\n        | ${promise}=    `Promise To Upload File`    ${CURDIR}/test_upload_file.txt\n        | `Click`          id=open_file_chooser_button\n        | ${upload_result}=    `Wait For`    ${promise}\n\n        Alternatively, you can use `Upload File By Selector` keyword.\n\n        [https://forum.robotframework.org/t//4313|Comment >>]\n        "
    },
    "promise_to_wait_for_download": {
        "name": "promise_to_wait_for_download",
        "doc": "Returns a promise that waits for next download event on page.\n\n        To enable downloads context's ``acceptDownloads`` needs to be true.\n\n        With default filepath downloaded files are deleted when Context the download happened in is closed.\n\n        If browser is connected remotely with `Connect To Browser` then ``saveAs`` must be set to store it locally where the browser runs!\n\n        | =Arguments= | =Description= |\n        | ``saveAs`` | Defines path where the file is saved persistently. File will also temporarily be saved in playwright context's default download location. If empty, generated unique path (GUID) is used and file is deleted when the context is closed. |\n        | ``wait_for_finished`` | If true, promise will wait for download to finish. If false, promise will resolve immediately after download has started. |\n        | ``download_timeout`` | Maximum time to wait for download to finish, if ``wait_for_finished`` is set to ``True``. If download is not finished during this time, keyword will be fail. |\n\n        Keyword returns dictionary of type `DownloadInfo` which contains downloaded file path\n        and suggested filename as well as state and downloadID.\n        Example:\n        | {\n        |   \"saveAs\": \"/tmp/robotframework-browser/downloads/2f1b3b7c-1b1b-4b1b-9b1b-1b1b1b1b1b1b\",\n        |   \"suggestedFilename\": \"downloaded_file.txt\"\n        | }\n\n        The keyword `New Browser` has a ``downloadsPath`` setting which can be used to set the default download directory.\n        If `saveAs` is set to a relative path, the file will be saved relative to the browser's ``downloadsPath`` setting or if that is not set, relative to the\n        Playwright's working directory. If ``saveAs`` is set to an absolute path, the file will be saved to that absolute path independent of ``downloadsPath``.\n\n        If the URL for the file to download shall be used, `Download` keyword may be a simpler alternative way to download the file.\n\n        Waited promise returns a dictionary which contains saveAs and suggestedFilename as keys. The saveAs contains\n        where the file is downloaded and suggestedFilename contains the name suggested name for the download.\n        The suggestedFilename is typically computed by the browser from the Content-Disposition response header\n        or the download attribute. See the spec on [https://html.spec.whatwg.org/#downloading-resources|whatwg].\n        Different browsers can use different logic for computing it.\n\n        Example usage:\n        | `New Context`            acceptDownloads=True\n        | `New Page`               ${LOGIN_URL}\n        | ${dl_promise}          `Promise To Wait For Download`    /path/to/download/file.name\n        | `Click`                  id=file_download\n        | ${file_obj}=           `Wait For`    ${dl_promise}\n        | File Should Exist      ${file_obj}[saveAs]\n        | Should Be True         ${file_obj.suggestedFilename}\n\n        [https://forum.robotframework.org/t//4314|Comment >>]\n        "
    },
    "wait_for": {
        "name": "wait_for",
        "doc": "Waits for promises to finish and returns results from them.\n\n        Returns one result if one promise waited. Otherwise returns an array of\n        results. If one fails, then this keyword will fail.\n\n        See `Promise To` for more information about promises.\n\n        For general waiting of elements please see `Implicit waiting`.\n\n        | =Arguments= | =Description= |\n        | ``promises`` | Promises to wait for. |\n\n        Example:\n        | ${promise}=    `Promise To`            `Wait For Response`     matcher=     timeout=3\n        | `Click`         \\#delayed_request\n        | ${body}=       `Wait For`              ${promise}\n\n        [https://forum.robotframework.org/t//4342|Comment >>]\n        "
    },
    "wait_for_all_promises": {
        "name": "wait_for_all_promises",
        "doc": "Waits for all promises to finish.\n\n        If one promises fails, then this keyword will fail.\n\n        Example:\n        | `Promise To`               Wait For Response     matcher=     timeout=3\n        | `Click`                    \\#delayed_request\n        | `Wait For All Promises`\n\n        [https://forum.robotframework.org/t//4344|Comment >>]\n        "
    },
    "wait_for_condition": {
        "name": "wait_for_condition",
        "doc": "Waits for a condition, defined with Browser getter keywords to become True.\n\n        This Keyword is basically just a wrapper around our assertion keywords, but with a timeout.\n        It can be used to wait for anything that also can be asserted with our keywords.\n\n        In comparison to Robot Frameworks `Wait Until Keywords Succeeds` this keyword is more\n        readable and easier to use but is limited to Browser libraries assertion keywords.\n\n        | =Arguments= | =Description= |\n        | ``condition`` | A condition, defined with Browser getter keywords, without the word ``Get``. |\n        | ``*args`` | Arguments to pass to the condition keyword. |\n        | ``timeout`` | Timout to wait for the condition to become True. Uses default timeout of the library if not set. |\n        | ``message`` | Overrides the default error message. |\n\n\n        The easiest way to use this keyword is first starting with an assertion keyword with assertion like: `Get Text`\n\n        Start:\n        | `Get Text`    id=status_bar   contains    Done\n\n        Then you replace the word `Get` with `Wait For Condition    ` and if necessary add the timeout argument.\n\n        End:\n        | `Wait For Condition`    Text    id=status_bar   contains    Done\n\n\n        Example usage:\n        | `Wait For Condition`    Element States    id=cdk-overlay-0    ==    detached\n        | `Wait For Condition`    Element States     //h1    contains    visible    editable    enabled    timeout=2 s\n        | `Wait For Condition`    Title    should start with    Robot\n        | `Wait For Condition`    Url    should end with    robotframework.org\n\n        [https://forum.robotframework.org/t//5269|Comment >>]\n        "
    },
    "wait_for_elements_state": {
        "name": "wait_for_elements_state",
        "doc": "Waits for the element found by ``selector`` to satisfy state option.\n\n        Note that Browser library has `Implicit waiting` mechanisms. Depending on\n        the situation you might not need to use `Wait for Elements State`.\n\n        State options could be either appear/disappear from dom, or become visible/hidden.\n        If at the moment of calling the keyword, the selector already satisfies the condition,\n        the keyword will return immediately.\n\n        If the selector doesn't satisfy the condition within the timeout the keyword will FAIL.\n\n        | =Arguments= | =Description= |\n        | ``selector`` | Selector of the corresponding object. See the `Finding elements` section for details about the selectors. |\n        | ``state`` | See `ElementState` for explanation. |\n        | ``timeout`` | uses default timeout from library if not set. |\n        | ``message`` | overrides the default error message. The ``message`` argument accepts `{selector}`, `{function}`, and `{timeout}` [https://docs.python.org/3/library/stdtypes.html#str.format|format] options. The `{function}` formatter is same ``state`` argument value. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example:\n        | `Wait For Elements State`    //h1    visible    timeout=2 s\n        | `Wait For Elements State`    //hi    focused    1s\n\n        [https://forum.robotframework.org/t//4345|Comment >>]\n        "
    },
    "wait_for_function": {
        "name": "wait_for_function",
        "doc": "Polls JavaScript expression or function in browser until it returns a (JavaScript) truthy value.\n\n        | =Arguments= | =Description= |\n        | ``function`` | A valid javascript function or a javascript function body. For example ``() => true`` and ``true`` will behave similarly. |\n        | ``selector`` | Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives. If given a selector a function is necessary, with an argument to capture the elementhandle. For example ``(element) => document.activeElement === element`` See the `Finding elements` section for details about the selectors. |\n        | ``polling`` | Default polling value of \"raf\" polls in a callback for ``requestAnimationFrame``. Any other value for polling will be parsed as a robot framework time for interval between polls. |\n        | ``timeout`` | Uses default timeout of the library if not set. |\n        | ``message`` | overrides the default error message. The ``message`` argument accepts `{selector}`, `{function}`, and `{timeout}` [https://docs.python.org/3/library/stdtypes.html#str.format|format] options. |\n\n        Keyword uses strict mode, see `Finding elements` for more details about strict mode.\n\n        Example usage:\n        | ${promise}      `Promise To`      `Wait For Function`    element => element.style.width==\"100%\"    selector=\\#progress_bar    timeout=4s\n        | `Click`         \\#progress_bar\n        | `Wait For`      ${promise}\n\n        [https://forum.robotframework.org/t//4346|Comment >>]\n        "
    },
    "wait_for_load_state": {
        "name": "wait_for_load_state",
        "doc": "Waits that the page reaches the required load state.\n\n        This resolves when the page reaches a required load state, load by default.\n        The navigation must have been committed when this method is called. If current document has already\n        reached the required state, resolves immediately.\n\n        | =Arguments= | =Description= |\n        | ``state``   | State to wait for, defaults to `load`. Possible values are `load|domcontentloaded|networkidle` |\n        | ``timeout`` | Timeout supports Robot Framework time format. Uses browser timeout if not set.                 |\n\n        If the state has been already reached while loading current document, the underlying Playwright will\n        resolve immediately. Can be one of:\n\n        | 'load' - wait for the load event to be fired.\n        | 'domcontentloaded' - wait for the DOMContentLoaded event to be fired.\n        | 'networkidle' - DISCOURAGED wait until there are no network connections for at least 500 ms.\n\n        Example:\n        | `Go To`                         ${URL}\n        | `Wait For Load State`    domcontentloaded    timeout=3s\n        "
    },
    "local_storage_clear": {
        "name": "local_storage_clear",
        "doc": "Remove all saved data from the local storage.\n\n        | =Arguments= | =Description= |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n        Example:\n        | `Local Storage Set Item`      Foo    bar\n        | `LocalStorage Clear`\n        | ${item} =    `Local Storage Get Item`    Foo\n        | Should Be Equal    ${item}    ${None}\n\n        [https://forum.robotframework.org/t//4299|Comment >>]\n        "
    },
    "local_storage_get_item": {
        "name": "local_storage_get_item",
        "doc": "Get saved data from the local storage.\n\n        | =Arguments= | =Description= |\n        | ``key`` | Named key of the item in the storage. |\n        | ``assertion_operator`` | Assertion operator to use. See `Assertions` for more information. |\n        | ``assertion_expected`` | Expected value to compare with. |\n        | ``message`` | Custom error message to use. |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n\n        See `Assertions` for further details for the assertion arguments. Defaults to None.\n\n        Example:\n        | `Local Storage Get Item`    Key    ==    Value    My error\n        | ${value} =    `Local Storage Get Item`    Key\n\n        [https://forum.robotframework.org/t//4300|Comment >>]\n        "
    },
    "local_storage_remove_item": {
        "name": "local_storage_remove_item",
        "doc": "Remove saved data with key from the local storage.\n\n        | =Arguments= | =Description= |\n        | ``key`` | The name of the item which shall be deleted. |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n        Example:\n        | `Local Storage Set Item`      Foo    bar\n        | `LocalStorage Remove Item`    Foo\n        | ${item} =    `Local Storage Get Item`    Foo\n        | Should Be Equal    ${item}    ${None}\n\n        [https://forum.robotframework.org/t//4301|Comment >>]\n        "
    },
    "local_storage_set_item": {
        "name": "local_storage_set_item",
        "doc": "Save data to the local storage.\n\n        | =Arguments= | =Description= |\n        | ``key`` | The name of the key under which it should be saved. |\n        | ``value`` | The value which shall be saved as a string. |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n\n        Example:\n        | `Local Storage Set Item`    Key    Value\n\n        [https://forum.robotframework.org/t//4302|Comment >>]\n        "
    },
    "session_storage_clear": {
        "name": "session_storage_clear",
        "doc": "Remove all saved data from the session storage.\n\n        | =Arguments= | =Description= |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n        Example:\n        | `SessionStorage Set Item`    mykey3    myvalue3\n        |  `SessionStorage Clear`\n        | `SessionStorage Get Item`    mykey3    ==    ${None}\n\n        [https://forum.robotframework.org/t//4323|Comment >>]\n        "
    },
    "session_storage_get_item": {
        "name": "session_storage_get_item",
        "doc": "Get saved data from from session storage.\n\n        | =Arguments= | =Description= |\n        | ``key`` | Named key of the item in the storage. |\n        | ``assertion_operator`` | Assertion operator to use. See `Assertions` for more information. |\n        | ``assertion_expected`` | Expected value to compare with. |\n        | ``message`` | Custom error message to use. |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n        Example:\n        | `SessionStorage Set Item`    key2    value2\n        | ${item} =    `SessionStorage Get Item`    key1\n        | Should Be Equal    ${item}    value2\n\n        [https://forum.robotframework.org/t//4324|Comment >>]\n        "
    },
    "session_storage_remove_item": {
        "name": "session_storage_remove_item",
        "doc": "\n        Remove saved data with key from the session storage.\n\n        | =Arguments= | =Description= |\n        | ``key`` | The name of the item which shall be deleted. |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n        Example:\n        | `SessionStorage Set Item`       mykey2    myvalue2\n        | `SessionStorage Remove Item`    mykey2\n        | `SessionStorage Get Item`       mykey2    ==    ${None}\n\n        [https://forum.robotframework.org/t//4325|Comment >>]\n        "
    },
    "session_storage_set_item": {
        "name": "session_storage_set_item",
        "doc": "Save data to session storage.\n\n        | =Arguments= | =Description= |\n        | ``key`` | The name of the key under which it should be saved. |\n        | ``value`` | The value which shall be saved as a string. |\n        | ``frame_selector`` | If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: ``iframe[name=\"test\"] >>> body`` |\n\n        Example:\n        | `SessionStorage Set Item`    key2    value2\n\n        [https://forum.robotframework.org/t//4326|Comment >>]\n        "
    },
    "__init__": {
        "name": "__init__",
        "doc": "Browser library is a browser automation library for Robot Framework.\n\nThis is the keyword documentation for Browser library. For information\nabout installation, support, and more please visit the\n[https://github.com/MarketSquare/robotframework-playwright|project pages].\nFor more information about Robot Framework itself, see [https://robotframework.org|robotframework.org].\n\nBrowser library uses\n[https://github.com/microsoft/playwright|Playwright Node module]\nto automate [https://www.chromium.org/Home|Chromium],\n[https://www.mozilla.org/en-US/firefox/new/|Firefox]\nand [https://webkit.org/|WebKit] with a single library.\n\n\n== Table of contents ==\n\n%TOC%\n\n= Browser, Context and Page =\n\nBrowser library works with three different layers that build on each other:\n*Browser*, *Context* and *Page*.\n\n\n== Browsers ==\n\nA *browser* can be started with one of the three\ndifferent engines Chromium, Firefox or Webkit.\n\n=== Supported Browsers ===\n\n|   Browser     | Browser with this engine                          |\n| ``chromium``  | Google Chrome, Microsoft Edge (since 2020), Opera |\n| ``firefox``   | Mozilla Firefox                                   |\n| ``webkit``    | Apple Safari, Mail, AppStore on MacOS and iOS     |\n\nSince [https://github.com/microsoft/playwright|Playwright] comes with a pack of builtin\nbinaries for all browsers, no additional drivers e.g. geckodriver are needed.\n\nAll these browsers that cover more than 85% of the world wide used browsers,\ncan be tested on Windows, Linux and MacOS.\nThere is no need for dedicated machines anymore.\n\nA browser process is started ``headless`` (without a GUI) by default.\nRun `New Browser` with specified arguments if a browser with a GUI is requested\nor if a proxy has to be configured.\nA browser process can contain several contexts.\n\n\n== Contexts ==\n\nA *context* corresponds to a set of independent incognito pages in a browser\nthat share cookies, sessions or profile settings. Pages in two separate\ncontexts do not share cookies, sessions or profile settings.\nCompared to Selenium, these do *not* require their own browser process.\nTo get a clean environment a test can just open a new context.\nDue to this new independent browser sessions can be opened with\nRobot Framework Browser about 10 times faster than with Selenium by\njust opening a `New Context` within the opened browser.\n\nTo make pages in the same suite share state, use the same context by opening the\ncontext with `New Context` on suite setup.\n\nThe context layer is useful e.g. for testing different user sessions on the\nsame webpage without opening a whole new browser context.\nContexts can also have detailed configurations, such as geo-location, language settings,\nthe viewport size or color scheme.\nContexts do also support http credentials to be set, so that basic authentication\ncan also be tested. To be able to download files within the test,\nthe ``acceptDownloads`` argument must be set to ``True`` in `New Context` keyword.\nA context can contain different pages.\n\n\n== Pages ==\n\nA *page* does contain the content of the loaded web site and has a browsing history.\nPages and browser tabs are the same.\n\nTypical usage could be:\n| *** Test Cases ***\n| Starting a browser with a page\n|     New Browser    chromium    headless=false\n|     New Context    viewport={'width': 1920, 'height': 1080}\n|     New Page       https://marketsquare.github.io/robotframework-browser/Browser.html\n|     Get Title      ==    Browser\n\nThe `Open Browser` keyword opens a new browser, a new context and a new page.\nThis keyword is useful for quick experiments or debugging sessions.\n\nWhen a `New Page` is called without an open browser, `New Browser`\nand `New Context` are executed with default values first.\n\nEach Browser, Context and Page has a unique ID with which they can be addressed.\nA full catalog of what is open can be received by `Get Browser Catalog` as a dictionary.\n\n= Automatic page and context closing =\n\n%AUTO_CLOSING_LEVEL%\n\n= Finding elements =\n\nAll keywords in the library that need to interact with an element\non a web page take an argument typically named ``selector`` that specifies\nhow to find the element. Keywords can find elements with strict mode. If\nstrict mode is true and locator finds multiple elements from the page, keyword\nwill fail. If keyword finds one element, keyword does not fail because of\nstrict mode. If strict mode is false, keyword does not fail if selector points\nmany elements. Strict mode is enabled by default, but can be changed in library\n`importing` or `Set Strict Mode` keyword. Keyword documentation states if keyword\nuses strict mode. If keyword does not state that strict mode is used, then strict\nmode is not applied for the keyword. For more details, see Playwright\n[https://playwright.dev/docs/api/class-page#page-query-selector|strict documentation].\n\nSelector strategies that are supported by default are listed in the table\nbelow.\n\n| = Strategy = |     = Match based on =     |         = Example =                |\n| ``css``      | CSS selector.              | ``css=.class > \\#login_btn``      |\n| ``xpath``    | XPath expression.          | ``xpath=//input[@id=\"login_btn\"]`` |\n| ``text``     | Browser text engine.       | ``text=Login``                     |\n| ``id``       | Element ID Attribute.      | ``id=login_btn``                   |\n\nCSS Selectors can also be recorded with `Record selector` keyword.\n\n== Explicit Selector Strategy ==\n\nThe explicit selector strategy is specified with a prefix using syntax\n``strategy=value``. Spaces around the separator are ignored, so\n``css=foo``, ``css= foo`` and ``css = foo`` are all equivalent.\n\n\n== Implicit Selector Strategy ==\n\n*The default selector strategy is `css`.*\n\nIf selector does not contain one of the know explicit selector strategies, it is\nassumed to contain css selector.\n\nSelectors that are starting with ``//`` or ``..`` are considered as xpath selectors.\n\nSelectors that are in quotes are considered as text selectors.\n\nExamples:\n\n| # CSS selectors are default.\n| `Click`  span > button.some_class         # This is equivalent\n| `Click`  css=span > button.some_class     # to this.\n|\n| # // or .. leads to xpath selector strategy\n| `Click`  //span/button[@class=\"some_class\"]\n| `Click`  xpath=//span/button[@class=\"some_class\"]\n|\n| # \"text\" in quotes leads to exact text selector strategy\n| `Click`  \"Login\"\n| `Click`  text=\"Login\"\n\n\n== CSS ==\n\nAs written before, the default selector strategy is `css`. See\n[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | css selector]\nfor more information.\n\nAny malformed selector not starting with ``//`` or ``..`` nor starting and ending\nwith a quote is assumed to be a css selector.\n\nNote that ``#`` is a comment character in [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#ignored-data | Robot Framework syntax] and needs to be\nescaped like ``\\#`` to work as a [https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors | css ID selector].\n\nExamples:\n| `Click`  span > button.some_class\n| `Get Text`  \\#username_field  ==  George\n\n\n== XPath ==\n\nXPath engine is equivalent to [https://developer.mozilla.org/en/docs/Web/API/Document/evaluate|Document.evaluate].\nExample: ``xpath=//html/body//span[text()=\"Hello World\"]``.\n\nMalformed selector starting with ``//`` or ``..`` is assumed to be an xpath selector.\nFor example, ``//html/body`` is converted to ``xpath=//html/body``. More\nexamples are displayed in `Examples`.\n\nNote that xpath does not pierce [https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM|shadow_roots].\n\n\n== Text ==\n\nText engine finds an element that contains a text node with the passed text.\nFor example, ``Click    text=Login`` clicks on a login button, and\n``Wait For Elements State   text=\"lazy loaded text\"`` waits for the \"lazy loaded text\"\nto appear in the page.\n\nText engine finds fields based on their labels in text inserting keywords.\n\nMalformed selector starting and ending with a quote (either ``\"`` or ``'``) is assumed\nto be a text selector. For example, ``Click    \"Login\"`` is converted to ``Click    text=\"Login\"``.\nBe aware that these leads to exact matches only!\nMore examples are displayed in `Examples`.\n\n\n=== Insensitive match ===\n\nBy default, the match is case-insensitive, ignores leading/trailing whitespace and\nsearches for a substring. This means ``text= Login`` matches\n``<button>Button loGIN (click me)</button>``.\n\n=== Exact match ===\n\nText body can be escaped with single or double quotes for precise matching,\ninsisting on exact match, including specified whitespace and case.\nThis means ``text=\"Login \"`` will only match ``<button>Login </button>`` with exactly\none space after \"Login\". Quoted text follows the usual escaping rules, e.g.\nuse ``\\\"`` to escape double quote in a double-quoted string: ``text=\"foo\\\"bar\"``.\n\n=== RegEx ===\n\nText body can also be a JavaScript-like regex wrapped in / symbols.\nThis means ``text=/^hello .*!$/i`` or ``text=/^Hello .*!$/`` will match ``<span>Hello Peter Parker!</span>``\nwith any name after ``Hello``, ending with ``!``.\nThe first one flagged with ``i`` for case-insensitive.\nSee [https://regex101.com/|https://regex101.com] for more information about RegEx.\n\n=== Button and Submit Values ===\n\nInput elements of the type button and submit are rendered with their value as text,\nand text engine finds them. For example, ``text=Login`` matches\n``<input type=button value=\"Login\">``.\n\n== Cascaded selector syntax ==\n\nBrowser library supports the same selector strategies as the underlying\nPlaywright node module: xpath, css, id and text. The strategy can either\nbe explicitly specified with a prefix or the strategy can be implicit.\n\nA major advantage of Browser is that multiple selector engines can be used\nwithin one selector. It is possible to mix XPath, CSS and Text selectors while\nselecting a single element.\n\nSelectors are strings that consists of one or more clauses separated by\n``>>`` token, e.g. ``clause1 >> clause2 >> clause3``. When multiple clauses\nare present, next one is queried relative to the previous one's result.\nBrowser library supports concatenation of different selectors separated by ``>>``.\n\nFor example:\n| `Highlight Elements`    \"Hello\" >> ../.. >> .select_button\n| `Highlight Elements`    text=Hello >> xpath=../.. >> css=.select_button\n\nEach clause contains a selector engine name and selector body, e.g.\n``engine=body``. Here ``engine`` is one of the supported engines (e.g. css or\na custom one). Selector ``body`` follows the format of the particular engine,\ne.g. for css engine it should be a [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | css selector].\nBody format is assumed to ignore leading and trailing white spaces,\nso that extra whitespace can be added for readability. If the selector\nengine needs to include ``>>`` in the body, it should be escaped\ninside a string to not be confused with clause separator,\ne.g. ``text=\"some >> text\"``.\n\nSelector engine name can be prefixed with ``*`` to capture an element that\nmatches the particular clause instead of the last one. For example,\n``css=article >> text=Hello`` captures the element with the text ``Hello``,\nand ``*css=article >> text=Hello`` (note the *) captures the article element\nthat contains some element with the text Hello.\n\nFor convenience, selectors in the wrong format are heuristically converted\nto the right format. See `Implicit Selector Strategy`\n\n== Examples ==\n| # queries 'div' css selector\n| Get Element    css=div\n|\n| # queries '//html/body/div' xpath selector\n| Get Element    //html/body/div\n|\n| # queries '\"foo\"' text selector\n| Get Element    text=foo\n|\n| # queries 'span' css selector inside the result of '//html/body/div' xpath selector\n| Get Element    xpath=//html/body/div >> css=span\n|\n| # converted to 'css=div'\n| Get Element    div\n|\n| # converted to 'xpath=//html/body/div'\n| Get Element    //html/body/div\n|\n| # converted to 'text=\"foo\"'\n| Get Element    \"foo\"\n|\n| # queries the div element of every 2nd span element inside an element with the id foo\n| Get Element    \\#foo >> css=span:nth-child(2n+1) >> div\n| Get Element    id=foo >> css=span:nth-child(2n+1) >> div\n\nBe aware that using ``#`` as a starting character in Robot Framework would be interpreted as comment.\nDue to that fact a ``#id`` must be escaped as ``\\#id``.\n\n== iFrames ==\n\nBy default, selector chains do not cross frame boundaries. It means that a\nsimple CSS selector is not able to select an element located inside an iframe\nor a frameset. For this use case, there is a special selector ``>>>`` which can\nbe used to combine a selector for the frame and a selector for an element\ninside a frame.\n\nGiven this simple pseudo html snippet:\n| <iframe id=\"iframe\" src=\"src.html\">\n|   #document\n|     <!DOCTYPE html>\n|     <html>\n|       <head></head>\n|       <body>\n|         <button id=\"btn\">Click Me</button>\n|       </body>\n|     </html>\n| </iframe>\n\nHere's a keyword call that clicks the button inside the frame.\n\n| Click   id=iframe >>> id=btn\n\nThe selectors on the left and right side of ``>>>`` can be any valid selectors.\nThe selector clause directly before the frame opener ``>>>`` must select the frame element itself.\nFrame selection is the only place where Browser Library modifies the selector, as explained in above.\nIn all cases, the library does not alter the selector in any way, instead it is passed as is to the\nPlaywright side.\n\nIf multiple keyword shall be performed inside a frame,\nit is possible to define a selector prefix with `Set Selector Prefix`.\nIf this prefix is set to a frame/iframe it has similar behavior as SeleniumLibrary keyword `Select Frame`.\n\n== WebComponents and Shadow DOM ==\n\nPlaywright and so also Browser are able to do automatic piercing of Shadow DOMs\nand therefore are the best automation technology when working with WebComponents.\n\nAlso other technologies claim that they can handle\n[https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM|Shadow DOM and Web Components].\nHowever, none of them do pierce shadow roots automatically,\nwhich may be inconvenient when working with Shadow DOM and Web Components.\n\nFor that reason, the css engine pierces shadow roots. More specifically, every\n[https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator|Descendant combinator]\npierces an arbitrary number of open shadow roots, including the implicit descendant combinator\nat the start of the selector.\n\nThat means, it is not necessary to select each shadow host, open its shadow root and\nselect the next shadow host until you reach the element that should be controlled.\n\n=== CSS:light ===\n\n``css:light`` engine is equivalent to [https://developer.mozilla.org/en/docs/Web/API/Document/querySelector | Document.querySelector]\nand behaves according to the CSS spec.\nHowever, it does not pierce shadow roots.\n\n``css`` engine first searches for elements in the light dom in the iteration order,\nand then recursively inside open shadow roots in the iteration order. It does not\nsearch inside closed shadow roots or iframes.\n\nExamples:\n\n| <article>\n|   <div>In the light dom</div>\n|   <div slot='myslot'>In the light dom, but goes into the shadow slot</div>\n|   <open mode shadow root>\n|       <div class='in-the-shadow'>\n|           <span class='content'>\n|               In the shadow dom\n|               <open mode shadow root>\n|                   <li id='target'>Deep in the shadow</li>\n|               </open mode shadow root>\n|           </span>\n|       </div>\n|       <slot name='myslot'></slot>\n|   </open mode shadow root>\n| </article>\n\nNote that ``<open mode shadow root>`` is not an html element, but rather a shadow root\ncreated with ``element.attachShadow({mode: 'open'})``.\n\n- Both ``\"css=article div\"`` and ``\"css:light=article div\"`` match the first ``<div>In the light dom</div>``.\n- Both ``\"css=article > div\"`` and ``\"css:light=article > div\"`` match two ``div`` elements that are direct children of the ``article``.\n- ``\"css=article .in-the-shadow\"`` matches the ``<div class='in-the-shadow'>``, piercing the shadow root, while ``\"css:light=article .in-the-shadow\"`` does not match anything.\n- ``\"css:light=article div > span\"`` does not match anything, because both light-dom ``div`` elements do not contain a ``span``.\n- ``\"css=article div > span\"`` matches the ``<span class='content'>``, piercing the shadow root.\n- ``\"css=article > .in-the-shadow\"`` does not match anything, because ``<div class='in-the-shadow'>`` is not a direct child of ``article``\n- ``\"css:light=article > .in-the-shadow\"`` does not match anything.\n- ``\"css=article li#target\"`` matches the ``<li id='target'>Deep in the shadow</li>``, piercing two shadow roots.\n\n=== text:light ===\n\n``text`` engine open pierces shadow roots similarly to ``css``, while ``text:light`` does not.\nText engine first searches for elements in the light dom in the iteration order, and then\nrecursively inside open shadow roots in the iteration order. It does not search inside\nclosed shadow roots or iframes.\n\n=== id, data-testid, data-test-id, data-test and their :light counterparts ===\n\nAttribute engines are selecting based on the corresponding attribute value.\nFor example: ``data-test-id=foo`` is equivalent to ``css=[data-test-id=\"foo\"]``,\nand ``id:light=foo`` is equivalent to ``css:light=[id=\"foo\"]``.\n\n== Element reference syntax ==\n\nIt is possible to get a reference to a Locator by using `Get Element` and `Get Elements` keywords.\nKeywords do not save reference to an element in the HTML document, instead it saves reference to a Playwright\n[https://playwright.dev/docs/api/class-locator|Locator]. In nutshell Locator captures the logic of how to\nretrieve that element from the page. Each time an action is performed, the locator re-searches the elements\nin the page. This reference can be used as a *first* part of a selector by using a special selector\nsyntax `element=`. like this:\n\n| ${ref}=    Get Element    .some_class\n|            Click          ${ref} >> .some_child     # Locator searches an element from the page.\n|            Click          ${ref} >> .other_child    # Locator searches again an element from the page.\n\nThe `.some_child` and `.other_child` selectors in the example are relative to the element referenced\nby ${ref}. Please note that frame piercing is not possible with element reference.\n\n= Assertions =\n\nKeywords that accept arguments ``assertion_operator`` <`AssertionOperator`> and ``assertion_expected``\ncan optionally assert that a specified condition holds. Keywords will return the value even when the\nassertion is performed by the keyword.\n\nAssert will retry and fail only after a specified timeout.\nSee `Importing` and ``retry_assertions_for`` (default is 1 second) for configuring this timeout.\n\n\n%ASSERTION_TABLE%\n\nBy default, keywords will provide an error message if an assertion fails.\nDefault error messages can be overwritten with a ``message`` argument.\nThe ``message`` argument accepts `{value}`, `{value_type}`, `{expected}` and\n`{expected_type}` [https://docs.python.org/3/library/stdtypes.html#str.format|format]\noptions.\nThe `{value}` is the value returned by the keyword and the `{expected}`\nis the expected value defined by the user, usually the value in the\n``assertion_expected`` argument. The `{value_type}` and\n`{expected_type}` are the type definitions from `{value}` and `{expected}`\narguments. In similar fashion as Python\n[https://docs.python.org/3/library/functions.html#type|type] returns type definition.\nAssertions will retry until ``timeout`` has expired if they do not pass.\n\nThe assertion ``assertion_expected`` value is not converted by the library and\nis used as is. Therefore when assertion is made, the ``assertion_expected``\nargument value and value returned the keyword must have the same type. If types\nare not the same, assertion will fail. Example `Get Text` always returns a string\nand has to be compared with a string, even the returned value might look like\na number.\n\nOther Keywords have other specific types they return.\n`Get Element Count` always returns an integer.\n`Get Bounding Box` and `Get Viewport Size` can be filtered.\nThey return a dictionary without a filter and a number when filtered.\nThese Keywords do automatic conversion for the expected value if a number is returned.\n\n* < less or greater > With Strings*\nComparisons of strings with ``greater than`` or ``less than`` compares each character,\nstarting from 0 regarding where it stands in the code page.\nExample: ``A < Z``, ``Z < a``, ``ac < dc`\nIt does never compare the length of elements. Neither lists nor strings.\nThe comparison stops at the first character that is different.\nExamples: ``'abcde' < 'abd'``, ``'100.000' < '2'``\nIn Python 3 and therefore also in Browser it is not possible to compare numbers\nwith strings with a greater or less operator.\nOn keywords that return numbers, the given expected value is automatically\nconverted to a number before comparison.\n\n\nThe getters `Get Page State` and `Get Browser Catalog` return a dictionary. Values of the dictionary can directly asserted.\nPay attention of possible types because they are evaluated in Python. For example:\n\n| Get Page State    validate    2020 >= value['year']                     # Comparison of numbers\n| Get Page State    validate    \"IMPORTANT MESSAGE!\" == value['message']  # Comparison of strings\n\n== The 'then' or 'evaluate' closure ==\n\nKeywords that accept arguments ``assertion_operator`` and ``assertion_expected``\ncan optionally also use ``then`` or ``evaluate`` closure to modify the returned value with\nBuiltIn Evaluate. Actual value can be accessed with ``value``.\n\nFor example ``Get Title  then  'TITLE: '+value``.\nSee\n[https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Evaluating%20expressions|\nBuiltin Evaluating expressions]\nfor more info on the syntax.\n\n== Examples ==\n\n| # *Keyword*    *Selector*                    *Key*        *Assertion Operator*    *Assertion Expected*\n| Get Title                                           equal                 Page Title\n| Get Title                                           ^=                    Page\n| Get Style    //*[@id=\"div-element\"]      width      >                     100\n| Get Title                                           matches               \\\\w+\\\\s\\\\w+\n| Get Title                                           validate              value == \"Login Page\"\n| Get Title                                           evaluate              value if value == \"some value\" else \"something else\"\n\n\n= Implicit waiting =\n\nBrowser library and Playwright have many mechanisms to help in waiting for elements.\nPlaywright will auto-wait before performing actions on elements.\nPlease see [https://playwright.dev/docs/actionability/ | Auto-waiting on Playwright documentation]\nfor more information.\n\nOn top of Playwright auto-waiting Browser assertions will wait and retry\nfor specified time before failing any `Assertions`.\nTime is specified in Browser library initialization with ``retry_assertions_for``.\n\nBrowser library also includes explicit waiting keywords such as `Wait for Elements State`\nif more control for waiting is needed.\n\n= Experimental: Re-using same node process =\n\nBrowser library integrated nodejs and python. The NodeJS side can be also executed as a standalone process.\nBrowser libraries running on the same machine can talk to that instead of starting new node processes.\nThis can speed execution when running tests parallel.\nTo start node side run on the directory when the Browser package is\n``PLAYWRIGHT_BROWSERS_PATH=0 node Browser/wrapper/index.js PORT``.\n\n``PORT`` is the port you want to use for the node process.\nTo execute tests then with pabot for example do ``ROBOT_FRAMEWORK_BROWSER_NODE_PORT=PORT pabot ..``.\n\n= Experimental: Provide parameters to node process =\n\nBrowser library is integrated with NodeJSand and Python. Browser library starts a node process, to communicate\nPlaywright API in NodeJS side. It is possible to provide parameters for the started node process by defining\nROBOT_FRAMEWORK_BROWSER_NODE_DEBUG_OPTIONS environment variable, before starting the test execution. Example:\n``ROBOT_FRAMEWORK_BROWSER_NODE_DEBUG_OPTIONS=--inspect;robot path/to/tests``.\nThere can be multiple arguments defined in the environment variable and arguments must be separated with comma.\n\n= Scope Setting =\n\nSome keywords which manipulates library settings have a scope argument.\nWith that scope argument one can set the \"live time\" of that setting.\nAvailable Scopes are: `Global`, `Suite` and `Test`/`Task`\nSee `Scope`.\nIs a scope finished, this scoped setting, like timeout, will no longer be used.\n\nLive Times:\n- A `Global` scope will live forever until it is overwritten by another `Global` scope. Or locally temporarily overridden by a more narrow scope.\n- A `Suite` scope will locally override the `Global` scope and live until the end of the Suite within it is set, or if it is overwritten by a later setting with `Global` or same scope. Children suite does inherit the setting from the parent suite but also may have its own local `Suite` setting that then will be inherited to its children suites.\n- A `Test` or `Task` scope will be inherited from its parent suite but when set, lives until the end of that particular test or task.\n\nA new set higher order scope will always remove the lower order scope which may be in charge.\nSo the setting of a `Suite` scope from a test, will set that scope to the robot file suite where that test is and removes the `Test` scope that may have been in place.\n\n= Extending Browser library with a JavaScript module =\n\nBrowser library can be extended with JavaScript. The module must be in CommonJS format that Node.js uses.\nYou can translate your ES6 module to Node.js CommonJS style with Babel. Many other languages\ncan be also translated to modules that can be used from Node.js. For example TypeScript, PureScript and\nClojureScript just to mention few.\n\n| async function myGoToKeyword(url, args, page, logger, playwright) {\n|   logger(args.toString())\n|   playwright.coolNewFeature()\n|   return await page.goto(url);\n| }\n\nFunctions can contain any number of arguments and arguments may have default values.\n\nThere are some reserved arguments that are not accessible from Robot Framework side.\nThey are injected to the function if they are in the arguments:\n\n``page``: [https://playwright.dev/docs/api/class-page|the playwright Page object].\n\n``args``: the rest of values from Robot Framework keyword call ``*args``.\n\n``logger``: callback function that takes strings as arguments and writes them to robot log. Can be called multiple times.\n\n``playwright``: playwright module (* from 'playwright'). Useful for integrating with Playwright features that Browser library doesn't support with it's own keywords. [https://playwright.dev/docs/api/class-playwright| API docs]\n\nalso argument name ``self`` can not be used.\n\n== Example module.js ==\n\n| async function myGoToKeyword(pageUrl, page) {\n|   await page.goto(pageUrl);\n|   return await page.title();\n| }\n| exports.__esModule = true;\n| exports.myGoToKeyword = myGoToKeyword;\n\n== Example Robot Framework side ==\n\n| *** Settings ***\n| Library   Browser  jsextension=${CURDIR}/module.js\n|\n| *** Test Cases ***\n| Hello\n|   New Page\n|   ${title}=  myGoToKeyword  https://playwright.dev\n|   Should be equal  ${title}  Playwright\n\nAlso selector syntax can be extended with a custom selector using a js module\n\n== Example module keyword for custom selector registering ==\n\n| async function registerMySelector(playwright) {\n| playwright.selectors.register(\"myselector\", () => ({\n|    // Returns the first element matching given selector in the root's subtree.\n|    query(root, selector) {\n|       return root.querySelector(`a[data-title=\"${selector}\"]`);\n|     },\n|\n|     // Returns all elements matching given selector in the root's subtree.\n|     queryAll(root, selector) {\n|       return Array.from(root.querySelectorAll(`a[data-title=\"${selector}\"]`));\n|     }\n| }));\n| return 1;\n| }\n| exports.__esModule = true;\n| exports.registerMySelector = registerMySelector;\n\n= Plugins =\n\nBrowser library offers plugins as a way to modify and add library keywords and modify some of the internal\nfunctionality without creating a new library or hacking the source code. See plugin API\n[https://github.com/MarketSquare/robotframework-browser/blob/main/docs/plugins/README.md | documentation] for\nfurther details.\n\n= Language =\n\nBrowser library offers possibility to translte keyword names and documentation to new language. If language\nis defined, Browser library will search from\n[https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path | module search path]\nPython packages starting with `robotframework_browser_translation` by using\n[https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/ | Python pluging API]. Library\nis using naming convention to find Python plugins. The packages must implement single API call, `get_language`\nwithout any arguments. Method must return a dictionary containing two keys: `language` and `path`. The\nlanguage key value defines which language the package contains. Also value should match (case insentive)\nthe library init ``language`` parameter. The path parameter value should be full path to the translation file.\nThe file name or extension is not important, but data must be in json format. The keys of json are the\nmethods names, not the keyword names, which implements keywords. Value of key is json object which contains\ntwo keys: `name` and `doc`. The `name` key contains the keyword translated name and `doc` contains keyword\ntranslated documentation. Providing doc and name are optional, example translation json file can only provide\ntranslations to keyword names or only to documentatin. But it is always recomended to provide translation\nto both name and doc.\n\nDefault translation file, with English language can be created by running\n`rfbrowser translation /path/to/translation.json` command. Command does not provide transltations to other\nlanguages, it only provides easy way to create full list of translted kewyords and their documentation\nwith correct format. It is also possible to add keywords from library plugins and js extenstions by\nproviding `--plugings` and `--jsextension` arguments to command. Example:\n`rfbrowser translation --plugings myplugin.SomePlugin --jsextension /path/ot/jsplugin.js /path/to/translation.json`"
    },
    "__intro__": {
        "name": "__intro__",
        "doc": "Browser library is a browser automation library for Robot Framework.\n\n    This is the keyword documentation for Browser library. For information\n    about installation, support, and more please visit the\n    [https://github.com/MarketSquare/robotframework-playwright|project pages].\n    For more information about Robot Framework itself, see [https://robotframework.org|robotframework.org].\n\n    Browser library uses\n    [https://github.com/microsoft/playwright|Playwright Node module]\n    to automate [https://www.chromium.org/Home|Chromium],\n    [https://www.mozilla.org/en-US/firefox/new/|Firefox]\n    and [https://webkit.org/|WebKit] with a single library.\n\n\n    == Table of contents ==\n\n    %TOC%\n\n    = Browser, Context and Page =\n\n    Browser library works with three different layers that build on each other:\n    *Browser*, *Context* and *Page*.\n\n\n    == Browsers ==\n\n    A *browser* can be started with one of the three\n    different engines Chromium, Firefox or Webkit.\n\n    === Supported Browsers ===\n\n    |   Browser     | Browser with this engine                          |\n    | ``chromium``  | Google Chrome, Microsoft Edge (since 2020), Opera |\n    | ``firefox``   | Mozilla Firefox                                   |\n    | ``webkit``    | Apple Safari, Mail, AppStore on MacOS and iOS     |\n\n    Since [https://github.com/microsoft/playwright|Playwright] comes with a pack of builtin\n    binaries for all browsers, no additional drivers e.g. geckodriver are needed.\n\n    All these browsers that cover more than 85% of the world wide used browsers,\n    can be tested on Windows, Linux and MacOS.\n    There is no need for dedicated machines anymore.\n\n    A browser process is started ``headless`` (without a GUI) by default.\n    Run `New Browser` with specified arguments if a browser with a GUI is requested\n    or if a proxy has to be configured.\n    A browser process can contain several contexts.\n\n\n    == Contexts ==\n\n    A *context* corresponds to a set of independent incognito pages in a browser\n    that share cookies, sessions or profile settings. Pages in two separate\n    contexts do not share cookies, sessions or profile settings.\n    Compared to Selenium, these do *not* require their own browser process.\n    To get a clean environment a test can just open a new context.\n    Due to this new independent browser sessions can be opened with\n    Robot Framework Browser about 10 times faster than with Selenium by\n    just opening a `New Context` within the opened browser.\n\n    To make pages in the same suite share state, use the same context by opening the\n    context with `New Context` on suite setup.\n\n    The context layer is useful e.g. for testing different user sessions on the\n    same webpage without opening a whole new browser context.\n    Contexts can also have detailed configurations, such as geo-location, language settings,\n    the viewport size or color scheme.\n    Contexts do also support http credentials to be set, so that basic authentication\n    can also be tested. To be able to download files within the test,\n    the ``acceptDownloads`` argument must be set to ``True`` in `New Context` keyword.\n    A context can contain different pages.\n\n\n    == Pages ==\n\n    A *page* does contain the content of the loaded web site and has a browsing history.\n    Pages and browser tabs are the same.\n\n    Typical usage could be:\n    | *** Test Cases ***\n    | Starting a browser with a page\n    |     New Browser    chromium    headless=false\n    |     New Context    viewport={'width': 1920, 'height': 1080}\n    |     New Page       https://marketsquare.github.io/robotframework-browser/Browser.html\n    |     Get Title      ==    Browser\n\n    The `Open Browser` keyword opens a new browser, a new context and a new page.\n    This keyword is useful for quick experiments or debugging sessions.\n\n    When a `New Page` is called without an open browser, `New Browser`\n    and `New Context` are executed with default values first.\n\n    Each Browser, Context and Page has a unique ID with which they can be addressed.\n    A full catalog of what is open can be received by `Get Browser Catalog` as a dictionary.\n\n    = Automatic page and context closing =\n\n    %AUTO_CLOSING_LEVEL%\n\n    = Finding elements =\n\n    All keywords in the library that need to interact with an element\n    on a web page take an argument typically named ``selector`` that specifies\n    how to find the element. Keywords can find elements with strict mode. If\n    strict mode is true and locator finds multiple elements from the page, keyword\n    will fail. If keyword finds one element, keyword does not fail because of\n    strict mode. If strict mode is false, keyword does not fail if selector points\n    many elements. Strict mode is enabled by default, but can be changed in library\n    `importing` or `Set Strict Mode` keyword. Keyword documentation states if keyword\n    uses strict mode. If keyword does not state that strict mode is used, then strict\n    mode is not applied for the keyword. For more details, see Playwright\n    [https://playwright.dev/docs/api/class-page#page-query-selector|strict documentation].\n\n    Selector strategies that are supported by default are listed in the table\n    below.\n\n    | = Strategy = |     = Match based on =     |         = Example =                |\n    | ``css``      | CSS selector.              | ``css=.class > \\#login_btn``      |\n    | ``xpath``    | XPath expression.          | ``xpath=//input[@id=\"login_btn\"]`` |\n    | ``text``     | Browser text engine.       | ``text=Login``                     |\n    | ``id``       | Element ID Attribute.      | ``id=login_btn``                   |\n\n    CSS Selectors can also be recorded with `Record selector` keyword.\n\n    == Explicit Selector Strategy ==\n\n    The explicit selector strategy is specified with a prefix using syntax\n    ``strategy=value``. Spaces around the separator are ignored, so\n    ``css=foo``, ``css= foo`` and ``css = foo`` are all equivalent.\n\n\n    == Implicit Selector Strategy ==\n\n    *The default selector strategy is `css`.*\n\n    If selector does not contain one of the know explicit selector strategies, it is\n    assumed to contain css selector.\n\n    Selectors that are starting with ``//`` or ``..`` are considered as xpath selectors.\n\n    Selectors that are in quotes are considered as text selectors.\n\n    Examples:\n\n    | # CSS selectors are default.\n    | `Click`  span > button.some_class         # This is equivalent\n    | `Click`  css=span > button.some_class     # to this.\n    |\n    | # // or .. leads to xpath selector strategy\n    | `Click`  //span/button[@class=\"some_class\"]\n    | `Click`  xpath=//span/button[@class=\"some_class\"]\n    |\n    | # \"text\" in quotes leads to exact text selector strategy\n    | `Click`  \"Login\"\n    | `Click`  text=\"Login\"\n\n\n    == CSS ==\n\n    As written before, the default selector strategy is `css`. See\n    [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | css selector]\n    for more information.\n\n    Any malformed selector not starting with ``//`` or ``..`` nor starting and ending\n    with a quote is assumed to be a css selector.\n\n    Note that ``#`` is a comment character in [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#ignored-data | Robot Framework syntax] and needs to be\n    escaped like ``\\#`` to work as a [https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors | css ID selector].\n\n    Examples:\n    | `Click`  span > button.some_class\n    | `Get Text`  \\#username_field  ==  George\n\n\n    == XPath ==\n\n    XPath engine is equivalent to [https://developer.mozilla.org/en/docs/Web/API/Document/evaluate|Document.evaluate].\n    Example: ``xpath=//html/body//span[text()=\"Hello World\"]``.\n\n    Malformed selector starting with ``//`` or ``..`` is assumed to be an xpath selector.\n    For example, ``//html/body`` is converted to ``xpath=//html/body``. More\n    examples are displayed in `Examples`.\n\n    Note that xpath does not pierce [https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM|shadow_roots].\n\n\n    == Text ==\n\n    Text engine finds an element that contains a text node with the passed text.\n    For example, ``Click    text=Login`` clicks on a login button, and\n    ``Wait For Elements State   text=\"lazy loaded text\"`` waits for the \"lazy loaded text\"\n    to appear in the page.\n\n    Text engine finds fields based on their labels in text inserting keywords.\n\n    Malformed selector starting and ending with a quote (either ``\"`` or ``'``) is assumed\n    to be a text selector. For example, ``Click    \"Login\"`` is converted to ``Click    text=\"Login\"``.\n    Be aware that these leads to exact matches only!\n    More examples are displayed in `Examples`.\n\n\n    === Insensitive match ===\n\n    By default, the match is case-insensitive, ignores leading/trailing whitespace and\n    searches for a substring. This means ``text= Login`` matches\n    ``<button>Button loGIN (click me)</button>``.\n\n    === Exact match ===\n\n    Text body can be escaped with single or double quotes for precise matching,\n    insisting on exact match, including specified whitespace and case.\n    This means ``text=\"Login \"`` will only match ``<button>Login </button>`` with exactly\n    one space after \"Login\". Quoted text follows the usual escaping rules, e.g.\n    use ``\\\"`` to escape double quote in a double-quoted string: ``text=\"foo\\\"bar\"``.\n\n    === RegEx ===\n\n    Text body can also be a JavaScript-like regex wrapped in / symbols.\n    This means ``text=/^hello .*!$/i`` or ``text=/^Hello .*!$/`` will match ``<span>Hello Peter Parker!</span>``\n    with any name after ``Hello``, ending with ``!``.\n    The first one flagged with ``i`` for case-insensitive.\n    See [https://regex101.com/|https://regex101.com] for more information about RegEx.\n\n    === Button and Submit Values ===\n\n    Input elements of the type button and submit are rendered with their value as text,\n    and text engine finds them. For example, ``text=Login`` matches\n    ``<input type=button value=\"Login\">``.\n\n    == Cascaded selector syntax ==\n\n    Browser library supports the same selector strategies as the underlying\n    Playwright node module: xpath, css, id and text. The strategy can either\n    be explicitly specified with a prefix or the strategy can be implicit.\n\n    A major advantage of Browser is that multiple selector engines can be used\n    within one selector. It is possible to mix XPath, CSS and Text selectors while\n    selecting a single element.\n\n    Selectors are strings that consists of one or more clauses separated by\n    ``>>`` token, e.g. ``clause1 >> clause2 >> clause3``. When multiple clauses\n    are present, next one is queried relative to the previous one's result.\n    Browser library supports concatenation of different selectors separated by ``>>``.\n\n    For example:\n    | `Highlight Elements`    \"Hello\" >> ../.. >> .select_button\n    | `Highlight Elements`    text=Hello >> xpath=../.. >> css=.select_button\n\n    Each clause contains a selector engine name and selector body, e.g.\n    ``engine=body``. Here ``engine`` is one of the supported engines (e.g. css or\n    a custom one). Selector ``body`` follows the format of the particular engine,\n    e.g. for css engine it should be a [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | css selector].\n    Body format is assumed to ignore leading and trailing white spaces,\n    so that extra whitespace can be added for readability. If the selector\n    engine needs to include ``>>`` in the body, it should be escaped\n    inside a string to not be confused with clause separator,\n    e.g. ``text=\"some >> text\"``.\n\n    Selector engine name can be prefixed with ``*`` to capture an element that\n    matches the particular clause instead of the last one. For example,\n    ``css=article >> text=Hello`` captures the element with the text ``Hello``,\n    and ``*css=article >> text=Hello`` (note the *) captures the article element\n    that contains some element with the text Hello.\n\n    For convenience, selectors in the wrong format are heuristically converted\n    to the right format. See `Implicit Selector Strategy`\n\n    == Examples ==\n    | # queries 'div' css selector\n    | Get Element    css=div\n    |\n    | # queries '//html/body/div' xpath selector\n    | Get Element    //html/body/div\n    |\n    | # queries '\"foo\"' text selector\n    | Get Element    text=foo\n    |\n    | # queries 'span' css selector inside the result of '//html/body/div' xpath selector\n    | Get Element    xpath=//html/body/div >> css=span\n    |\n    | # converted to 'css=div'\n    | Get Element    div\n    |\n    | # converted to 'xpath=//html/body/div'\n    | Get Element    //html/body/div\n    |\n    | # converted to 'text=\"foo\"'\n    | Get Element    \"foo\"\n    |\n    | # queries the div element of every 2nd span element inside an element with the id foo\n    | Get Element    \\#foo >> css=span:nth-child(2n+1) >> div\n    | Get Element    id=foo >> css=span:nth-child(2n+1) >> div\n\n    Be aware that using ``#`` as a starting character in Robot Framework would be interpreted as comment.\n    Due to that fact a ``#id`` must be escaped as ``\\#id``.\n\n    == iFrames ==\n\n    By default, selector chains do not cross frame boundaries. It means that a\n    simple CSS selector is not able to select an element located inside an iframe\n    or a frameset. For this use case, there is a special selector ``>>>`` which can\n    be used to combine a selector for the frame and a selector for an element\n    inside a frame.\n\n    Given this simple pseudo html snippet:\n    | <iframe id=\"iframe\" src=\"src.html\">\n    |   #document\n    |     <!DOCTYPE html>\n    |     <html>\n    |       <head></head>\n    |       <body>\n    |         <button id=\"btn\">Click Me</button>\n    |       </body>\n    |     </html>\n    | </iframe>\n\n    Here's a keyword call that clicks the button inside the frame.\n\n    | Click   id=iframe >>> id=btn\n\n    The selectors on the left and right side of ``>>>`` can be any valid selectors.\n    The selector clause directly before the frame opener ``>>>`` must select the frame element itself.\n    Frame selection is the only place where Browser Library modifies the selector, as explained in above.\n    In all cases, the library does not alter the selector in any way, instead it is passed as is to the\n    Playwright side.\n\n    If multiple keyword shall be performed inside a frame,\n    it is possible to define a selector prefix with `Set Selector Prefix`.\n    If this prefix is set to a frame/iframe it has similar behavior as SeleniumLibrary keyword `Select Frame`.\n\n    == WebComponents and Shadow DOM ==\n\n    Playwright and so also Browser are able to do automatic piercing of Shadow DOMs\n    and therefore are the best automation technology when working with WebComponents.\n\n    Also other technologies claim that they can handle\n    [https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM|Shadow DOM and Web Components].\n    However, none of them do pierce shadow roots automatically,\n    which may be inconvenient when working with Shadow DOM and Web Components.\n\n    For that reason, the css engine pierces shadow roots. More specifically, every\n    [https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator|Descendant combinator]\n    pierces an arbitrary number of open shadow roots, including the implicit descendant combinator\n    at the start of the selector.\n\n    That means, it is not necessary to select each shadow host, open its shadow root and\n    select the next shadow host until you reach the element that should be controlled.\n\n    === CSS:light ===\n\n    ``css:light`` engine is equivalent to [https://developer.mozilla.org/en/docs/Web/API/Document/querySelector | Document.querySelector]\n    and behaves according to the CSS spec.\n    However, it does not pierce shadow roots.\n\n    ``css`` engine first searches for elements in the light dom in the iteration order,\n    and then recursively inside open shadow roots in the iteration order. It does not\n    search inside closed shadow roots or iframes.\n\n    Examples:\n\n    | <article>\n    |   <div>In the light dom</div>\n    |   <div slot='myslot'>In the light dom, but goes into the shadow slot</div>\n    |   <open mode shadow root>\n    |       <div class='in-the-shadow'>\n    |           <span class='content'>\n    |               In the shadow dom\n    |               <open mode shadow root>\n    |                   <li id='target'>Deep in the shadow</li>\n    |               </open mode shadow root>\n    |           </span>\n    |       </div>\n    |       <slot name='myslot'></slot>\n    |   </open mode shadow root>\n    | </article>\n\n    Note that ``<open mode shadow root>`` is not an html element, but rather a shadow root\n    created with ``element.attachShadow({mode: 'open'})``.\n\n    - Both ``\"css=article div\"`` and ``\"css:light=article div\"`` match the first ``<div>In the light dom</div>``.\n    - Both ``\"css=article > div\"`` and ``\"css:light=article > div\"`` match two ``div`` elements that are direct children of the ``article``.\n    - ``\"css=article .in-the-shadow\"`` matches the ``<div class='in-the-shadow'>``, piercing the shadow root, while ``\"css:light=article .in-the-shadow\"`` does not match anything.\n    - ``\"css:light=article div > span\"`` does not match anything, because both light-dom ``div`` elements do not contain a ``span``.\n    - ``\"css=article div > span\"`` matches the ``<span class='content'>``, piercing the shadow root.\n    - ``\"css=article > .in-the-shadow\"`` does not match anything, because ``<div class='in-the-shadow'>`` is not a direct child of ``article``\n    - ``\"css:light=article > .in-the-shadow\"`` does not match anything.\n    - ``\"css=article li#target\"`` matches the ``<li id='target'>Deep in the shadow</li>``, piercing two shadow roots.\n\n    === text:light ===\n\n    ``text`` engine open pierces shadow roots similarly to ``css``, while ``text:light`` does not.\n    Text engine first searches for elements in the light dom in the iteration order, and then\n    recursively inside open shadow roots in the iteration order. It does not search inside\n    closed shadow roots or iframes.\n\n    === id, data-testid, data-test-id, data-test and their :light counterparts ===\n\n    Attribute engines are selecting based on the corresponding attribute value.\n    For example: ``data-test-id=foo`` is equivalent to ``css=[data-test-id=\"foo\"]``,\n    and ``id:light=foo`` is equivalent to ``css:light=[id=\"foo\"]``.\n\n    == Element reference syntax ==\n\n    It is possible to get a reference to a Locator by using `Get Element` and `Get Elements` keywords.\n    Keywords do not save reference to an element in the HTML document, instead it saves reference to a Playwright\n    [https://playwright.dev/docs/api/class-locator|Locator]. In nutshell Locator captures the logic of how to\n    retrieve that element from the page. Each time an action is performed, the locator re-searches the elements\n    in the page. This reference can be used as a *first* part of a selector by using a special selector\n    syntax `element=`. like this:\n\n    | ${ref}=    Get Element    .some_class\n    |            Click          ${ref} >> .some_child     # Locator searches an element from the page.\n    |            Click          ${ref} >> .other_child    # Locator searches again an element from the page.\n\n    The `.some_child` and `.other_child` selectors in the example are relative to the element referenced\n    by ${ref}. Please note that frame piercing is not possible with element reference.\n\n    = Assertions =\n\n    Keywords that accept arguments ``assertion_operator`` <`AssertionOperator`> and ``assertion_expected``\n    can optionally assert that a specified condition holds. Keywords will return the value even when the\n    assertion is performed by the keyword.\n\n    Assert will retry and fail only after a specified timeout.\n    See `Importing` and ``retry_assertions_for`` (default is 1 second) for configuring this timeout.\n\n\n    %ASSERTION_TABLE%\n\n    By default, keywords will provide an error message if an assertion fails.\n    Default error messages can be overwritten with a ``message`` argument.\n    The ``message`` argument accepts `{value}`, `{value_type}`, `{expected}` and\n    `{expected_type}` [https://docs.python.org/3/library/stdtypes.html#str.format|format]\n    options.\n    The `{value}` is the value returned by the keyword and the `{expected}`\n    is the expected value defined by the user, usually the value in the\n    ``assertion_expected`` argument. The `{value_type}` and\n    `{expected_type}` are the type definitions from `{value}` and `{expected}`\n    arguments. In similar fashion as Python\n    [https://docs.python.org/3/library/functions.html#type|type] returns type definition.\n    Assertions will retry until ``timeout`` has expired if they do not pass.\n\n    The assertion ``assertion_expected`` value is not converted by the library and\n    is used as is. Therefore when assertion is made, the ``assertion_expected``\n    argument value and value returned the keyword must have the same type. If types\n    are not the same, assertion will fail. Example `Get Text` always returns a string\n    and has to be compared with a string, even the returned value might look like\n    a number.\n\n    Other Keywords have other specific types they return.\n    `Get Element Count` always returns an integer.\n    `Get Bounding Box` and `Get Viewport Size` can be filtered.\n    They return a dictionary without a filter and a number when filtered.\n    These Keywords do automatic conversion for the expected value if a number is returned.\n\n    * < less or greater > With Strings*\n    Comparisons of strings with ``greater than`` or ``less than`` compares each character,\n    starting from 0 regarding where it stands in the code page.\n    Example: ``A < Z``, ``Z < a``, ``ac < dc`\n    It does never compare the length of elements. Neither lists nor strings.\n    The comparison stops at the first character that is different.\n    Examples: ``'abcde' < 'abd'``, ``'100.000' < '2'``\n    In Python 3 and therefore also in Browser it is not possible to compare numbers\n    with strings with a greater or less operator.\n    On keywords that return numbers, the given expected value is automatically\n    converted to a number before comparison.\n\n\n    The getters `Get Page State` and `Get Browser Catalog` return a dictionary. Values of the dictionary can directly asserted.\n    Pay attention of possible types because they are evaluated in Python. For example:\n\n    | Get Page State    validate    2020 >= value['year']                     # Comparison of numbers\n    | Get Page State    validate    \"IMPORTANT MESSAGE!\" == value['message']  # Comparison of strings\n\n    == The 'then' or 'evaluate' closure ==\n\n    Keywords that accept arguments ``assertion_operator`` and ``assertion_expected``\n    can optionally also use ``then`` or ``evaluate`` closure to modify the returned value with\n    BuiltIn Evaluate. Actual value can be accessed with ``value``.\n\n    For example ``Get Title  then  'TITLE: '+value``.\n    See\n    [https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Evaluating%20expressions|\n    Builtin Evaluating expressions]\n    for more info on the syntax.\n\n    == Examples ==\n\n    | # *Keyword*    *Selector*                    *Key*        *Assertion Operator*    *Assertion Expected*\n    | Get Title                                           equal                 Page Title\n    | Get Title                                           ^=                    Page\n    | Get Style    //*[@id=\"div-element\"]      width      >                     100\n    | Get Title                                           matches               \\\\w+\\\\s\\\\w+\n    | Get Title                                           validate              value == \"Login Page\"\n    | Get Title                                           evaluate              value if value == \"some value\" else \"something else\"\n\n\n    = Implicit waiting =\n\n    Browser library and Playwright have many mechanisms to help in waiting for elements.\n    Playwright will auto-wait before performing actions on elements.\n    Please see [https://playwright.dev/docs/actionability/ | Auto-waiting on Playwright documentation]\n    for more information.\n\n    On top of Playwright auto-waiting Browser assertions will wait and retry\n    for specified time before failing any `Assertions`.\n    Time is specified in Browser library initialization with ``retry_assertions_for``.\n\n    Browser library also includes explicit waiting keywords such as `Wait for Elements State`\n    if more control for waiting is needed.\n\n    = Experimental: Re-using same node process =\n\n    Browser library integrated nodejs and python. The NodeJS side can be also executed as a standalone process.\n    Browser libraries running on the same machine can talk to that instead of starting new node processes.\n    This can speed execution when running tests parallel.\n    To start node side run on the directory when the Browser package is\n    ``PLAYWRIGHT_BROWSERS_PATH=0 node Browser/wrapper/index.js PORT``.\n\n    ``PORT`` is the port you want to use for the node process.\n    To execute tests then with pabot for example do ``ROBOT_FRAMEWORK_BROWSER_NODE_PORT=PORT pabot ..``.\n\n    = Experimental: Provide parameters to node process =\n\n    Browser library is integrated with NodeJSand and Python. Browser library starts a node process, to communicate\n    Playwright API in NodeJS side. It is possible to provide parameters for the started node process by defining\n    ROBOT_FRAMEWORK_BROWSER_NODE_DEBUG_OPTIONS environment variable, before starting the test execution. Example:\n    ``ROBOT_FRAMEWORK_BROWSER_NODE_DEBUG_OPTIONS=--inspect;robot path/to/tests``.\n    There can be multiple arguments defined in the environment variable and arguments must be separated with comma.\n\n    = Scope Setting =\n\n    Some keywords which manipulates library settings have a scope argument.\n    With that scope argument one can set the \"live time\" of that setting.\n    Available Scopes are: `Global`, `Suite` and `Test`/`Task`\n    See `Scope`.\n    Is a scope finished, this scoped setting, like timeout, will no longer be used.\n\n    Live Times:\n    - A `Global` scope will live forever until it is overwritten by another `Global` scope. Or locally temporarily overridden by a more narrow scope.\n    - A `Suite` scope will locally override the `Global` scope and live until the end of the Suite within it is set, or if it is overwritten by a later setting with `Global` or same scope. Children suite does inherit the setting from the parent suite but also may have its own local `Suite` setting that then will be inherited to its children suites.\n    - A `Test` or `Task` scope will be inherited from its parent suite but when set, lives until the end of that particular test or task.\n\n    A new set higher order scope will always remove the lower order scope which may be in charge.\n    So the setting of a `Suite` scope from a test, will set that scope to the robot file suite where that test is and removes the `Test` scope that may have been in place.\n\n    = Extending Browser library with a JavaScript module =\n\n    Browser library can be extended with JavaScript. The module must be in CommonJS format that Node.js uses.\n    You can translate your ES6 module to Node.js CommonJS style with Babel. Many other languages\n    can be also translated to modules that can be used from Node.js. For example TypeScript, PureScript and\n    ClojureScript just to mention few.\n\n    | async function myGoToKeyword(url, args, page, logger, playwright) {\n    |   logger(args.toString())\n    |   playwright.coolNewFeature()\n    |   return await page.goto(url);\n    | }\n\n    Functions can contain any number of arguments and arguments may have default values.\n\n    There are some reserved arguments that are not accessible from Robot Framework side.\n    They are injected to the function if they are in the arguments:\n\n    ``page``: [https://playwright.dev/docs/api/class-page|the playwright Page object].\n\n    ``args``: the rest of values from Robot Framework keyword call ``*args``.\n\n    ``logger``: callback function that takes strings as arguments and writes them to robot log. Can be called multiple times.\n\n    ``playwright``: playwright module (* from 'playwright'). Useful for integrating with Playwright features that Browser library doesn't support with it's own keywords. [https://playwright.dev/docs/api/class-playwright| API docs]\n\n    also argument name ``self`` can not be used.\n\n    == Example module.js ==\n\n    | async function myGoToKeyword(pageUrl, page) {\n    |   await page.goto(pageUrl);\n    |   return await page.title();\n    | }\n    | exports.__esModule = true;\n    | exports.myGoToKeyword = myGoToKeyword;\n\n    == Example Robot Framework side ==\n\n    | *** Settings ***\n    | Library   Browser  jsextension=${CURDIR}/module.js\n    |\n    | *** Test Cases ***\n    | Hello\n    |   New Page\n    |   ${title}=  myGoToKeyword  https://playwright.dev\n    |   Should be equal  ${title}  Playwright\n\n    Also selector syntax can be extended with a custom selector using a js module\n\n    == Example module keyword for custom selector registering ==\n\n    | async function registerMySelector(playwright) {\n    | playwright.selectors.register(\"myselector\", () => ({\n    |    // Returns the first element matching given selector in the root's subtree.\n    |    query(root, selector) {\n    |       return root.querySelector(`a[data-title=\"${selector}\"]`);\n    |     },\n    |\n    |     // Returns all elements matching given selector in the root's subtree.\n    |     queryAll(root, selector) {\n    |       return Array.from(root.querySelectorAll(`a[data-title=\"${selector}\"]`));\n    |     }\n    | }));\n    | return 1;\n    | }\n    | exports.__esModule = true;\n    | exports.registerMySelector = registerMySelector;\n\n    = Plugins =\n\n    Browser library offers plugins as a way to modify and add library keywords and modify some of the internal\n    functionality without creating a new library or hacking the source code. See plugin API\n    [https://github.com/MarketSquare/robotframework-browser/blob/main/docs/plugins/README.md | documentation] for\n    further details.\n\n    = Language =\n\n    Browser library offers possibility to translte keyword names and documentation to new language. If language\n    is defined, Browser library will search from\n    [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path | module search path]\n    Python packages starting with `robotframework_browser_translation` by using\n    [https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/ | Python pluging API]. Library\n    is using naming convention to find Python plugins. The packages must implement single API call, `get_language`\n    without any arguments. Method must return a dictionary containing two keys: `language` and `path`. The\n    language key value defines which language the package contains. Also value should match (case insentive)\n    the library init ``language`` parameter. The path parameter value should be full path to the translation file.\n    The file name or extension is not important, but data must be in json format. The keys of json are the\n    methods names, not the keyword names, which implements keywords. Value of key is json object which contains\n    two keys: `name` and `doc`. The `name` key contains the keyword translated name and `doc` contains keyword\n    translated documentation. Providing doc and name are optional, example translation json file can only provide\n    translations to keyword names or only to documentatin. But it is always recomended to provide translation\n    to both name and doc.\n\n    Default translation file, with English language can be created by running\n    `rfbrowser translation /path/to/translation.json` command. Command does not provide transltations to other\n    languages, it only provides easy way to create full list of translted kewyords and their documentation\n    with correct format. It is also possible to add keywords from library plugins and js extenstions by\n    providing `--plugings` and `--jsextension` arguments to command. Example:\n    `rfbrowser translation --plugings myplugin.SomePlugin --jsextension /path/ot/jsplugin.js /path/to/translation.json`\n    "
    }
}